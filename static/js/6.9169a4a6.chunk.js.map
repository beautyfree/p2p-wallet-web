{"version":3,"sources":["components/modals/TransactionInfoModals/common/styled.ts","components/modals/TransactionInfoModals/TransactionStatusModal/Send/Send.tsx","components/modals/TransactionInfoModals/TransactionStatusModal/Swap/Swap.tsx","components/modals/TransactionInfoModals/TransactionStatusModal/TransactionStatusModal.tsx"],"names":["Wrapper","Header","Title","Desc","CloseWrapper","CloseIcon","BlockWrapper","CheckmarkIcon","OtherIcon","ProgressWrapper","Content","SendWrapper","ValueCurrency","ValueOriginal","SwapWrapper","SwapColumn","SwapInfo","SwapBlock","SwapIcon","SwapAmount","FieldsWrapper","FieldWrapper","FieldTitle","FieldValue","ShareIcon","ShareWrapper","Footer","ButtonExplorer","Send","params","fromAmount","isReceiver","transaction","fromToken","prefix","symbol","value","Swap","minimumOutputAmount","tokenConfigs","useConfig","size","formatBigNumber","inputAmount","name","ProgressLine","DEFAULT_TRANSACTION_ERROR","TransactionStatusModal","close","dispatch","useDispatch","useState","useSelector","state","signature","Transaction","cluster","tokenAccounts","useEffect","newProgress","timerId","setInterval","setProgress","progress","clearTimeout","executeAction","a","setIsExecuting","unwrapResult","resultSignature","setSignature","transferNotification","header","text","Error","setTransactionError","type","ToastManager","mount","getTransaction","trx","transactionError","setTimeout","str","useMemo","tokenAccount","isProcessing","isSuccess","onClick","trackEvent","transactionConfirmed","isExecuting","className","classNames","isError","Boolean","style","width","getExplorerUrl","navigator","error","console","primary","disabled","lightGray","href","target","rel"],"mappings":"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","file":"static/js/6.9169a4a6.chunk.js","sourcesContent":["import { styled } from '@linaria/react';\nimport { rgba } from 'polished';\n\nimport { Button, Icon } from 'components/ui';\n\nexport const Wrapper = styled.div`\n  position: relative;\n\n  display: flex;\n  flex-basis: 524px;\n  flex-direction: column;\n  overflow: hidden;\n\n  background: #fff;\n\n  border-radius: 15px;\n`;\n\nexport const Header = styled.div`\n  position: relative;\n\n  padding: 26px 20px 50px;\n\n  text-align: center;\n`;\n\nexport const Title = styled.div`\n  margin-bottom: 10px;\n\n  color: #000;\n  font-weight: bold;\n  font-size: 20px;\n  line-height: 100%;\n  text-transform: capitalize;\n`;\n\nexport const Desc = styled.div`\n  color: #a3a5ba;\n  font-weight: 600;\n  font-size: 16px;\n  line-height: 100%;\n`;\n\nexport const CloseWrapper = styled.div`\n  position: absolute;\n  top: 15px;\n  right: 15px;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 32px;\n  height: 32px;\n\n  background: #f6f6f8;\n  border-radius: 8px;\n\n  cursor: pointer;\n`;\n\nexport const CloseIcon = styled(Icon)`\n  width: 16px;\n  height: 16px;\n\n  color: #a3a5ba;\n`;\n\nexport const BlockWrapper = styled.div`\n  position: absolute;\n  bottom: -28px;\n  left: 50%;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 55px;\n  height: 55px;\n  margin-left: -27px;\n\n  background: #5887ff;\n  border-radius: 12px;\n\n  &.isProcessing {\n    background: #ffd177;\n  }\n\n  &.isSuccess {\n    background: #77db7c;\n  }\n\n  &.isError {\n    background: #f77;\n  }\n`;\n\nexport const CheckmarkIcon = styled(Icon)`\n  width: 45px;\n  height: 45px;\n\n  color: #fff;\n`;\n\nexport const OtherIcon = styled(Icon)`\n  width: 37px;\n  height: 37px;\n\n  color: #fff;\n`;\n\nexport const ProgressWrapper = styled.div`\n  height: 1px;\n\n  background: rgba(0, 0, 0, 0.05);\n`;\n\nexport const Content = styled.div`\n  padding-top: 40px;\n`;\n\nexport const SendWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-bottom: 20px;\n`;\n\nexport const ValueCurrency = styled.div`\n  color: #000;\n  font-weight: 600;\n  font-size: 28px;\n  line-height: 120%;\n`;\n\nexport const ValueOriginal = styled.div`\n  margin-top: 4px;\n\n  color: #a3a5ba;\n  font-weight: 600;\n  font-size: 16px;\n  line-height: 120%;\n`;\n\nexport const SwapWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n\n  margin-bottom: 40px;\n`;\n\nexport const SwapColumn = styled.div`\n  display: flex;\n  flex: 1;\n  align-items: center;\n\n  &:not(:first-child) {\n    justify-content: flex-start;\n  }\n\n  &:not(:last-child) {\n    justify-content: flex-end;\n  }\n`;\n\nexport const SwapInfo = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nexport const SwapBlock = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  width: 32px;\n  height: 32px;\n  margin: 6px 26px 0;\n\n  background: #f6f6f8;\n  border-radius: 12px;\n`;\n\nexport const SwapIcon = styled(Icon)`\n  width: 24px;\n  height: 24px;\n\n  color: #a3a5ba;\n`;\n\nexport const SwapAmount = styled.div`\n  margin-top: 10px;\n\n  color: #000;\n  font-weight: 600;\n  font-size: 18px;\n  line-height: 120%;\n`;\n\nexport const FieldsWrapper = styled.div``;\n\nexport const FieldWrapper = styled.div`\n  padding: 16px 30px;\n\n  &:first-child {\n    border-top: 1px solid ${rgba('#000', 0.05)};\n  }\n\n  &:not(:last-child) {\n    border-bottom: 1px solid ${rgba('#000', 0.05)};\n  }\n`;\n\nexport const FieldTitle = styled.div`\n  color: #a3a5ba;\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 21px;\n`;\n\nexport const FieldValue = styled.div`\n  display: flex;\n  align-items: center;\n  margin-top: 3px;\n\n  font-weight: 600;\n  font-size: 16px;\n  line-height: 21px;\n`;\n\nexport const ShareIcon = styled(Icon)`\n  width: 24px;\n  height: 24px;\n\n  color: #a3a5ba;\n`;\n\nexport const ShareWrapper = styled.div`\n  display: flex;\n  flex-shrink: 0;\n  align-items: center;\n  justify-content: center;\n  width: 36px;\n  height: 36px;\n  margin-left: 20px;\n\n  background: rgba(163, 165, 186, 0.1);\n  border-radius: 8px;\n  cursor: pointer;\n\n  &:hover {\n    background: #eff3ff;\n\n    ${ShareIcon} {\n      color: #5887ff;\n    }\n  }\n`;\n\nexport const Footer = styled.div`\n  display: flex;\n  align-items: center;\n  padding: 24px 20px;\n\n  border-top: 1px solid ${rgba('#000', 0.05)};\n\n  & > :not(:last-child) {\n    margin-right: 16px;\n  }\n\n  &.isCentered {\n    justify-content: center;\n  }\n`;\n\nexport const ButtonExplorer = styled(Button)`\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 150%;\n`;\n","import React, { FC } from 'react';\n\nimport Decimal from 'decimal.js';\n\nimport { Token } from 'api/token/Token';\nimport { Transaction } from 'api/transaction/Transaction';\nimport { AmountUSD } from 'components/common/AmountUSD';\nimport {\n  SendWrapper,\n  ValueCurrency,\n  ValueOriginal,\n} from 'components/modals/TransactionInfoModals/common/styled';\n\nexport type TransferParams = {\n  fromToken: Token;\n  fromAmount: Decimal;\n};\n\ninterface Props {\n  params: TransferParams;\n  transaction: Transaction | null;\n  isReceiver: boolean;\n}\n\nexport const Send: FC<Props> = ({ params: { fromToken, fromAmount }, transaction, isReceiver }) => {\n  return (\n    <SendWrapper>\n      <ValueCurrency>\n        {isReceiver ? '+' : '-'}{' '}\n        {transaction?.short.destinationAmount.toNumber() ||\n          fromToken.toMajorDenomination(fromAmount).toString()}{' '}\n        {transaction?.short.sourceToken?.symbol || fromToken.symbol}\n      </ValueCurrency>\n      <ValueOriginal>\n        <AmountUSD\n          prefix={isReceiver ? '+' : '-'}\n          symbol={transaction?.short.sourceToken?.symbol || fromToken.symbol}\n          value={transaction?.short.destinationAmount || fromToken.toMajorDenomination(fromAmount)}\n        />\n      </ValueOriginal>\n    </SendWrapper>\n  );\n};\n","import React, { FC } from 'react';\n\nimport { u64 } from '@solana/spl-token';\n\nimport { useConfig } from 'app/contexts/swap';\nimport { formatBigNumber } from 'app/contexts/swap/utils/format';\nimport { TokenAvatar } from 'components/common/TokenAvatar';\nimport {\n  SwapAmount,\n  SwapBlock,\n  SwapColumn,\n  SwapIcon,\n  SwapInfo,\n  SwapWrapper,\n} from 'components/modals/TransactionInfoModals/common/styled';\n\nexport type SwapParams = {\n  inputTokenName: string;\n  inputAmount: u64;\n  outputTokenName: string;\n  minimumOutputAmount: u64;\n};\n\ninterface Props {\n  params: SwapParams;\n}\n\nexport const Swap: FC<Props> = ({\n  params: { inputTokenName, outputTokenName, inputAmount, minimumOutputAmount },\n}) => {\n  const { tokenConfigs } = useConfig();\n\n  return (\n    <SwapWrapper>\n      <SwapColumn>\n        <SwapInfo>\n          <TokenAvatar symbol={inputTokenName} size={44} />\n          <SwapAmount>\n            - {formatBigNumber(inputAmount, tokenConfigs[inputTokenName].decimals)} {inputTokenName}\n          </SwapAmount>\n        </SwapInfo>\n      </SwapColumn>\n      <SwapBlock>\n        <SwapIcon name=\"swap\" />\n      </SwapBlock>\n      <SwapColumn>\n        <SwapInfo>\n          <TokenAvatar symbol={outputTokenName} size={44} />\n          <SwapAmount>\n            + {formatBigNumber(minimumOutputAmount, tokenConfigs[outputTokenName].decimals)}{' '}\n            {outputTokenName}\n          </SwapAmount>\n        </SwapInfo>\n      </SwapColumn>\n    </SwapWrapper>\n  );\n};\n","import React, { FunctionComponent, useEffect, useMemo, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { styled } from '@linaria/react';\nimport { AsyncThunkAction, unwrapResult } from '@reduxjs/toolkit';\nimport classNames from 'classnames';\n\nimport { Transaction } from 'api/transaction/Transaction';\nimport { ToastManager } from 'components/common/ToastManager';\nimport { Button } from 'components/ui';\nimport { getTransaction } from 'store/slices/transaction/TransactionSlice';\nimport { trackEvent } from 'utils/analytics';\nimport { getExplorerUrl } from 'utils/connection';\nimport { transferNotification } from 'utils/transactionNotifications';\n\nimport {\n  BlockWrapper,\n  ButtonExplorer,\n  CheckmarkIcon,\n  CloseIcon,\n  CloseWrapper,\n  Content,\n  Desc,\n  FieldsWrapper,\n  FieldTitle,\n  FieldValue,\n  FieldWrapper,\n  Footer,\n  Header,\n  OtherIcon,\n  ProgressWrapper,\n  ShareIcon,\n  ShareWrapper,\n  Title,\n  Wrapper,\n} from '../common/styled';\nimport { Send, TransferParams } from './Send';\nimport { Swap, SwapParams } from './Swap';\n\nconst INITIAL_PROGRESS = 5;\n\nconst ProgressLine = styled.div`\n  width: ${INITIAL_PROGRESS}%;\n  height: 1px;\n\n  background: #5887ff;\n\n  transition: width 0.15s;\n`;\n\nconst handleCopyClick = (str: string) => () => {\n  try {\n    void navigator.clipboard.writeText(str);\n    ToastManager.info('Copied to buffer!');\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nconst DEFAULT_TRANSACTION_ERROR = 'Transaction error';\n\ntype SendActionType = AsyncThunkAction<string, any, any>;\ntype SwapActionType = () => Promise<string>;\n\ntype Props = {\n  type: 'send' | 'swap';\n  action: SendActionType | SwapActionType;\n  params: TransferParams | SwapParams;\n  close: (signature: string | null) => void;\n};\n\nexport const TransactionStatusModal: FunctionComponent<Props> = ({\n  type,\n  action,\n  params,\n  close,\n}) => {\n  const dispatch = useDispatch();\n  const [progress, setProgress] = useState(5);\n  const [isExecuting, setIsExecuting] = useState(false);\n  const [signature, setSignature] = useState<string | null>(null);\n  const transaction = useSelector(\n    (state) =>\n      (signature &&\n        state.transaction.items[signature] &&\n        Transaction.from(state.transaction.items[signature])) ||\n      null,\n  );\n  const [transactionError, setTransactionError] = useState(\n    transaction?.meta?.err ? DEFAULT_TRANSACTION_ERROR : '',\n  );\n  const cluster = useSelector((state) => state.wallet.network.cluster);\n  const tokenAccounts = useSelector((state) => state.wallet.tokenAccounts);\n\n  useEffect(() => {\n    let newProgress = INITIAL_PROGRESS;\n\n    if (!isExecuting) {\n      return;\n    }\n\n    const timerId = setInterval(() => {\n      if (progress <= 95) {\n        newProgress += 7;\n        setProgress(newProgress);\n      } else {\n        newProgress = 95;\n        setProgress(newProgress);\n      }\n    }, 2500);\n\n    return () => {\n      clearTimeout(timerId);\n      setProgress(100);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isExecuting]);\n\n  const executeAction = async () => {\n    try {\n      setIsExecuting(true);\n\n      switch (type) {\n        case 'send': {\n          const resultSignature = unwrapResult(await dispatch(action as SendActionType));\n          setSignature(resultSignature);\n\n          transferNotification({\n            header: 'Sent',\n            text: `- ${(params as TransferParams).fromToken\n              .toMajorDenomination((params as TransferParams).fromAmount)\n              .toString()} ${(params as TransferParams).fromToken.symbol}`,\n            symbol: (params as TransferParams).fromToken.symbol,\n          });\n          break;\n        }\n        case 'swap': {\n          const resultSignature = await (action as SwapActionType)();\n          setSignature(resultSignature);\n          break;\n        }\n        default:\n          throw new Error('Wrong type');\n      }\n    } catch (error) {\n      setTransactionError((error as Error).message);\n      setIsExecuting(false);\n\n      if (type === 'send') {\n        ToastManager.error(type, (error as Error).message);\n      }\n    }\n  };\n\n  useEffect(() => {\n    void executeAction();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    const mount = async () => {\n      if (!signature) {\n        return;\n      }\n\n      try {\n        const trx = unwrapResult(await dispatch(getTransaction(signature)));\n\n        if (trx) {\n          if (trx.meta?.err) {\n            setTransactionError(DEFAULT_TRANSACTION_ERROR);\n          } else if (transactionError) {\n            setTransactionError('');\n          }\n        } else {\n          setTimeout(mount, 3000);\n        }\n      } catch (error) {\n        setTransactionError((error as Error).message);\n        ToastManager.error((error as Error).message);\n      } finally {\n        setIsExecuting(false);\n      }\n    };\n\n    void mount();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [signature]);\n\n  const isReceiver = useMemo(() => {\n    if (!transaction) {\n      return false;\n    }\n\n    return !!tokenAccounts.find(\n      (tokenAccount) => tokenAccount.address === transaction.short.destination?.toBase58(),\n    );\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [transaction?.short.destination, tokenAccounts]);\n\n  const handleCloseClick = () => {\n    if (type === 'send') {\n      trackEvent('send_close_click', { transactionConfirmed: !isExecuting });\n    } else if (type === 'swap') {\n      trackEvent('swap_close_click', { transactionConfirmed: !isExecuting });\n    }\n\n    close(signature);\n  };\n\n  const handleDoneClick = () => {\n    if (type === 'send') {\n      trackEvent('send_done_click', { transactionConfirmed: !isExecuting });\n    } else if (type === 'swap') {\n      trackEvent('swap_done_click', { transactionConfirmed: !isExecuting });\n    }\n\n    close(signature);\n  };\n\n  const handleRetryClick = () => {\n    if (type === 'send') {\n      trackEvent('send_try_again_click', { error: transactionError });\n    } else if (type === 'swap') {\n      trackEvent('swap_try_again_click', { error: transactionError });\n    }\n\n    void executeAction();\n  };\n\n  const handleCancelClick = () => {\n    if (type === 'send') {\n      trackEvent('send_cancel_click', { error: transactionError });\n    } else if (type === 'swap') {\n      trackEvent('swap_cancel_click', { error: transactionError });\n    }\n\n    close(signature);\n  };\n\n  const isProcessing = (!signature || !transaction) && !transactionError;\n  const isSuccess = signature && transaction && !transactionError;\n\n  const renderTitle = () => {\n    if (isSuccess) {\n      return 'Success';\n    }\n\n    if (transactionError) {\n      return 'Something went wrong';\n    }\n\n    return type === 'send' ? 'Sending...' : 'Swapping...';\n  };\n\n  const renderDescription = () => {\n    if (isSuccess) {\n      return type === 'send'\n        ? `You’ve successfully sent ${(params as TransferParams).fromToken.symbol}`\n        : 'You’ve successfully swapped tokens';\n    }\n\n    if (transactionError) {\n      return type === 'send' ? 'Tokens have not been debited' : 'Tokens have not been swapped';\n    }\n\n    return 'Transaction processing';\n  };\n\n  return (\n    <Wrapper>\n      <Header>\n        <Title>{renderTitle()}</Title>\n        <Desc>{renderDescription()}</Desc>\n        <CloseWrapper onClick={handleCloseClick}>\n          <CloseIcon name=\"close\" />\n        </CloseWrapper>\n        <BlockWrapper\n          className={classNames({\n            isProcessing,\n            isSuccess,\n            isError: Boolean(transactionError),\n          })}>\n          {isSuccess ? (\n            <CheckmarkIcon name=\"checkmark\" />\n          ) : (\n            <OtherIcon name={transactionError ? 'warning' : 'timer'} />\n          )}\n        </BlockWrapper>\n      </Header>\n      <ProgressWrapper>\n        <ProgressLine style={{ width: `${progress}%` }} />\n      </ProgressWrapper>\n      <Content>\n        {type === 'send' ? (\n          <Send\n            params={params as TransferParams}\n            transaction={transaction}\n            isReceiver={isReceiver}\n          />\n        ) : undefined}\n        {type === 'swap' ? <Swap params={params as SwapParams} /> : undefined}\n        {signature ? (\n          <FieldsWrapper>\n            <FieldWrapper>\n              <FieldTitle>Transaction ID</FieldTitle>\n              <FieldValue>\n                {signature}{' '}\n                <ShareWrapper onClick={handleCopyClick(getExplorerUrl('tx', signature, cluster))}>\n                  <ShareIcon name=\"copy\" />\n                </ShareWrapper>\n              </FieldValue>\n            </FieldWrapper>\n          </FieldsWrapper>\n        ) : undefined}\n      </Content>\n      <Footer>\n        {transactionError ? (\n          <>\n            <Button primary disabled={isExecuting} onClick={handleRetryClick}>\n              Try again\n            </Button>\n            <Button lightGray disabled={isExecuting} onClick={handleCancelClick}>\n              Cancel\n            </Button>\n          </>\n        ) : (\n          <>\n            <Button primary onClick={handleDoneClick}>\n              Done\n            </Button>\n            {signature ? (\n              <a\n                href={getExplorerUrl('tx', signature, cluster)}\n                target=\"_blank\"\n                rel=\"noopener noreferrer noindex\"\n                onClick={() => {\n                  if (type === 'send') {\n                    trackEvent('send_explorer_click', { transactionConfirmed: !isExecuting });\n                  } else if (type === 'swap') {\n                    trackEvent('swap_explorer_click', { transactionConfirmed: !isExecuting });\n                  }\n                }}\n                className=\"button\">\n                <ButtonExplorer lightGray>View in blockchain explorer</ButtonExplorer>\n              </a>\n            ) : undefined}\n          </>\n        )}\n      </Footer>\n    </Wrapper>\n  );\n};\n"],"sourceRoot":""}