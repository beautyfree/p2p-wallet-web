{"version":3,"sources":["components/modals/TransactionInfoModals/common/styled.ts","components/modals/TransactionInfoModals/TransactionDetailsModal/TransactionDetailsModal.tsx"],"names":["Wrapper","Header","Title","Desc","CloseWrapper","CloseIcon","BlockWrapper","CheckmarkIcon","OtherIcon","ProgressWrapper","Content","SendWrapper","ValueCurrency","ValueOriginal","SwapWrapper","SwapColumn","SwapInfo","SwapBlock","SwapIcon","SwapAmount","FieldsWrapper","FieldWrapper","FieldTitle","FieldValue","ShareIcon","ShareWrapper","Footer","ButtonExplorer","StatusWrapper","Status","StatusIndicator","FieldRowWrapper","ColumnWrapper","FieldInfo","AddressWrapper","AddressTitle","AddressValue","FieldTitleWrapper","PaidByBadge","TransactionDetailsModal","close","useState","network","useWallet","transaction","useTransaction","signature","sourceTokenAccount","useTokenAccount","usePubkey","destinationTokenAccount","tokenAmount","useTokenAccountAmount","useEffect","type","trackEvent","date","dayjs","isShowFeeBadge","titleCase","title","onClick","name","sourceToken","destinationToken","width","height","borderRadius","symbol","address","size","prefix","value","renderAmountBlock","className","classNames","error","isShowDetails","source","destination","shortAddress","renderFromTo","href","getExplorerUrl","target","rel","isCentered","lightGray","setShowDetails","state"],"mappings":"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","file":"static/js/8.88188616.chunk.js","sourcesContent":["import { styled } from '@linaria/react';\nimport { rgba } from 'polished';\n\nimport { Button, Icon } from 'components/ui';\n\nexport const Wrapper = styled.div`\n  position: relative;\n\n  display: flex;\n  flex-basis: 524px;\n  flex-direction: column;\n  overflow: hidden;\n\n  background: #fff;\n\n  border-radius: 15px;\n`;\n\nexport const Header = styled.div`\n  position: relative;\n\n  padding: 26px 20px 50px;\n\n  text-align: center;\n`;\n\nexport const Title = styled.div`\n  margin-bottom: 10px;\n\n  color: #000;\n  font-weight: bold;\n  font-size: 20px;\n  line-height: 100%;\n  text-transform: capitalize;\n`;\n\nexport const Desc = styled.div`\n  color: #a3a5ba;\n  font-weight: 600;\n  font-size: 16px;\n  line-height: 100%;\n`;\n\nexport const CloseWrapper = styled.div`\n  position: absolute;\n  top: 15px;\n  right: 15px;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 32px;\n  height: 32px;\n\n  background: #f6f6f8;\n  border-radius: 8px;\n\n  cursor: pointer;\n`;\n\nexport const CloseIcon = styled(Icon)`\n  width: 16px;\n  height: 16px;\n\n  color: #a3a5ba;\n`;\n\nexport const BlockWrapper = styled.div`\n  position: absolute;\n  bottom: -28px;\n  left: 50%;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 55px;\n  height: 55px;\n  margin-left: -27px;\n\n  background: #5887ff;\n  border-radius: 12px;\n\n  &.isProcessing {\n    background: #ffd177;\n  }\n\n  &.isSuccess {\n    background: #77db7c;\n  }\n\n  &.isError {\n    background: #f77;\n  }\n`;\n\nexport const CheckmarkIcon = styled(Icon)`\n  width: 45px;\n  height: 45px;\n\n  color: #fff;\n`;\n\nexport const OtherIcon = styled(Icon)`\n  width: 37px;\n  height: 37px;\n\n  color: #fff;\n`;\n\nexport const ProgressWrapper = styled.div`\n  height: 1px;\n\n  background: rgba(0, 0, 0, 0.05);\n`;\n\nexport const Content = styled.div`\n  padding-top: 40px;\n`;\n\nexport const SendWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-bottom: 20px;\n`;\n\nexport const ValueCurrency = styled.div`\n  color: #000;\n  font-weight: 600;\n  font-size: 28px;\n  line-height: 120%;\n`;\n\nexport const ValueOriginal = styled.div`\n  margin-top: 4px;\n\n  color: #a3a5ba;\n  font-weight: 600;\n  font-size: 16px;\n  line-height: 120%;\n`;\n\nexport const SwapWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n\n  margin-bottom: 40px;\n`;\n\nexport const SwapColumn = styled.div`\n  display: flex;\n  flex: 1;\n  align-items: center;\n\n  &:not(:first-child) {\n    justify-content: flex-start;\n  }\n\n  &:not(:last-child) {\n    justify-content: flex-end;\n  }\n`;\n\nexport const SwapInfo = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nexport const SwapBlock = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  width: 32px;\n  height: 32px;\n  margin: 6px 26px 0;\n\n  background: #f6f6f8;\n  border-radius: 12px;\n`;\n\nexport const SwapIcon = styled(Icon)`\n  width: 24px;\n  height: 24px;\n\n  color: #a3a5ba;\n`;\n\nexport const SwapAmount = styled.div`\n  margin-top: 10px;\n\n  color: #000;\n  font-weight: 600;\n  font-size: 18px;\n  line-height: 120%;\n`;\n\nexport const FieldsWrapper = styled.div``;\n\nexport const FieldWrapper = styled.div`\n  padding: 16px 30px;\n\n  &:first-child {\n    border-top: 1px solid ${rgba('#000', 0.05)};\n  }\n\n  &:not(:last-child) {\n    border-bottom: 1px solid ${rgba('#000', 0.05)};\n  }\n`;\n\nexport const FieldTitle = styled.div`\n  color: #a3a5ba;\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 21px;\n`;\n\nexport const FieldValue = styled.div`\n  display: flex;\n  align-items: center;\n  margin-top: 3px;\n\n  font-weight: 600;\n  font-size: 16px;\n  line-height: 21px;\n`;\n\nexport const ShareIcon = styled(Icon)`\n  width: 24px;\n  height: 24px;\n\n  color: #a3a5ba;\n`;\n\nexport const ShareWrapper = styled.div`\n  display: flex;\n  flex-shrink: 0;\n  align-items: center;\n  justify-content: center;\n  width: 36px;\n  height: 36px;\n  margin-left: 20px;\n\n  background: rgba(163, 165, 186, 0.1);\n  border-radius: 8px;\n  cursor: pointer;\n\n  &:hover {\n    background: #eff3ff;\n\n    ${ShareIcon} {\n      color: #5887ff;\n    }\n  }\n`;\n\nexport const Footer = styled.div`\n  display: flex;\n  align-items: center;\n  padding: 24px 20px;\n\n  border-top: 1px solid ${rgba('#000', 0.05)};\n\n  & > :not(:last-child) {\n    margin-right: 16px;\n  }\n\n  &.isCentered {\n    justify-content: center;\n  }\n`;\n\nexport const ButtonExplorer = styled(Button)`\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 150%;\n`;\n","import type { FC } from 'react';\nimport { useEffect, useState } from 'react';\nimport Skeleton from 'react-loading-skeleton';\n\nimport { styled } from '@linaria/react';\nimport {\n  SwapTransaction,\n  titleCase,\n  TransferTransaction,\n  useTokenAccount,\n  useTokenAccountAmount,\n  useTransaction,\n  useWallet,\n} from '@p2p-wallet-web/core';\nimport { usePubkey } from '@p2p-wallet-web/sail';\nimport type { TransactionSignature } from '@solana/web3.js';\nimport classNames from 'classnames';\nimport dayjs from 'dayjs';\n\nimport { AmountUSD } from 'components/common/AmountUSD';\nimport { TokenAvatar } from 'components/common/TokenAvatar';\nimport { trackEvent } from 'utils/analytics';\nimport { getExplorerUrl } from 'utils/connection';\nimport { shortAddress } from 'utils/tokens';\n\nimport {\n  BlockWrapper,\n  ButtonExplorer,\n  CloseIcon,\n  CloseWrapper,\n  Content,\n  Desc,\n  FieldsWrapper,\n  FieldTitle,\n  FieldValue,\n  FieldWrapper,\n  Footer,\n  Header,\n  OtherIcon,\n  ProgressWrapper,\n  SendWrapper,\n  ShareIcon,\n  ShareWrapper,\n  SwapAmount,\n  SwapBlock,\n  SwapColumn,\n  SwapIcon,\n  SwapInfo,\n  SwapWrapper,\n  Title,\n  ValueCurrency,\n  ValueOriginal,\n  Wrapper,\n} from '../common/styled';\n\nconst StatusWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-bottom: 24px;\n`;\n\nconst Status = styled.div`\n  display: flex;\n  align-items: center;\n  height: 32px;\n  padding: 2px 10px;\n\n  color: #a3a5ba;\n  font-weight: 600;\n  font-size: 13px;\n  line-height: 20px;\n\n  background: rgba(246, 246, 248, 0.5);\n  border-radius: 6px;\n`;\n\nconst StatusIndicator = styled.div`\n  width: 8px;\n  height: 8px;\n  margin-right: 6px;\n\n  background: #77db7c;\n  border-radius: 2px;\n\n  &.error {\n    background: #f43d3d;\n  }\n\n  &.processing {\n    background: #ffa631;\n  }\n`;\n\nconst FieldRowWrapper = styled(FieldWrapper)`\n  display: grid;\n  grid-auto-flow: column;\n  grid-gap: 36px;\n`;\n\nconst ColumnWrapper = styled.div``;\n\nconst FieldInfo = styled.div`\n  display: flex;\n  margin-top: 15px;\n`;\n\nconst AddressWrapper = styled.div`\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  justify-content: center;\n  margin: 0 9px 0 12px;\n`;\n\nconst AddressTitle = styled.div`\n  color: #000;\n  font-weight: 600;\n  font-size: 16px;\n  line-height: 24px;\n`;\n\nconst AddressValue = styled.div`\n  color: #a3a5ba;\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 16px;\n`;\n\nconst FieldTitleWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst PaidByBadge = styled.div`\n  padding: 1px 8px;\n\n  color: #5887ff;\n  font-weight: 600;\n  font-size: 12px;\n\n  background: #eff3ff;\n  border-radius: 4px;\n`;\n\ntype Props = {\n  signature: TransactionSignature;\n  source: string;\n  close: () => void;\n};\n\nexport const TransactionDetailsModal: FC<Props> = ({ signature, source, close }) => {\n  const [isShowDetails, setShowDetails] = useState(false);\n  const { network } = useWallet();\n  const transaction = useTransaction(signature, source);\n\n  const sourceTokenAccount = useTokenAccount(usePubkey(transaction?.data?.source));\n  const destinationTokenAccount = useTokenAccount(usePubkey(transaction?.data?.destination));\n\n  const tokenAmount = useTokenAccountAmount(\n    usePubkey(transaction?.details.tokenAccount),\n    transaction?.details.amount,\n  );\n\n  useEffect(() => {\n    const type = transaction?.details.type;\n\n    if (type === 'send') {\n      trackEvent('Send_Process_Shown');\n    } else if (type === 'swap') {\n      trackEvent('Swap_Process_Shown');\n    }\n  }, [transaction?.details.type]);\n\n  // useEffect(() => {\n  //   const mount = async () => {\n  //     const trx = unwrapResult(await dispatch(getTransaction(signature)));\n  //\n  //     if (!trx) {\n  //       setTimeout(mount, 3000);\n  //     }\n  //   };\n  //\n  //   if (!transaction) {\n  //     void mount();\n  //   }\n  //   // eslint-disable-next-line react-hooks/exhaustive-deps\n  // }, [signature]);\n\n  if (transaction?.loading) {\n    return null;\n  }\n\n  const handleToggleShowDetailsClick = () => {\n    setShowDetails((state) => !state);\n  };\n\n  const renderFromTo = () => {\n    const type = transaction?.details.type;\n\n    const source = transaction?.data?.source;\n    const destination = transaction?.data?.destination;\n    const sourceToken = sourceTokenAccount?.balance?.token;\n    const destinationToken = destinationTokenAccount?.balance?.token;\n\n    if (type === 'swap') {\n      return (\n        <>\n          {transaction?.data?.source ? (\n            <FieldWrapper>\n              <FieldTitle>From</FieldTitle>\n              <FieldValue>{transaction.data.source}</FieldValue>\n            </FieldWrapper>\n          ) : undefined}\n          {transaction?.data?.destination ? (\n            <FieldWrapper>\n              <FieldTitle>To</FieldTitle>\n              <FieldValue>{transaction.data.destination}</FieldValue>\n            </FieldWrapper>\n          ) : undefined}\n        </>\n      );\n    }\n\n    if (type && ((source && sourceToken) || (destination && destinationToken))) {\n      return (\n        <FieldRowWrapper>\n          {source && sourceToken ? (\n            <ColumnWrapper>\n              <FieldTitle>From</FieldTitle>\n              <FieldInfo>\n                <TokenAvatar symbol={sourceToken.symbol} address={sourceToken.address} size={48} />\n                <AddressWrapper>\n                  <AddressTitle>{sourceToken.symbol}</AddressTitle>\n                  <AddressValue>{shortAddress(source)}</AddressValue>\n                </AddressWrapper>\n              </FieldInfo>\n            </ColumnWrapper>\n          ) : undefined}\n          {destination && destinationToken ? (\n            <ColumnWrapper>\n              <FieldTitle>To</FieldTitle>\n              <FieldInfo>\n                <TokenAvatar\n                  symbol={destinationToken.symbol}\n                  address={destinationToken.address}\n                  size={48}\n                />\n                <AddressWrapper>\n                  <AddressTitle>{destinationToken.symbol}</AddressTitle>\n                  <AddressValue>{shortAddress(destination)}</AddressValue>\n                </AddressWrapper>\n              </FieldInfo>\n            </ColumnWrapper>\n          ) : undefined}\n        </FieldRowWrapper>\n      );\n    }\n\n    return null;\n  };\n\n  const renderAmountBlock = () => {\n    const type = transaction?.details.type;\n\n    const sourceToken = sourceTokenAccount?.balance?.token;\n    const destinationToken = destinationTokenAccount?.balance?.token;\n\n    if (type === 'swap') {\n      return (\n        <SwapWrapper>\n          <SwapColumn>\n            <SwapInfo>\n              {sourceTokenAccount?.loading ? (\n                <Skeleton width={44} height={44} borderRadius={12} />\n              ) : (\n                <TokenAvatar\n                  symbol={sourceToken?.symbol}\n                  address={sourceToken?.address}\n                  size={44}\n                />\n              )}\n              <SwapAmount>\n                {sourceTokenAccount?.loading ? (\n                  <Skeleton width={50} height={16} />\n                ) : (\n                  <>- {sourceTokenAccount?.balance?.formatUnits()}</>\n                )}\n              </SwapAmount>\n            </SwapInfo>\n          </SwapColumn>\n          <SwapBlock>\n            <SwapIcon name=\"swap\" />\n          </SwapBlock>\n          <SwapColumn>\n            <SwapInfo>\n              {destinationTokenAccount?.loading ? (\n                <Skeleton width={44} height={44} borderRadius={12} />\n              ) : (\n                <TokenAvatar\n                  symbol={destinationToken?.symbol}\n                  address={destinationToken?.address}\n                  size={44}\n                />\n              )}\n              <SwapAmount>\n                {sourceTokenAccount?.loading ? (\n                  <Skeleton width={80} height={16} />\n                ) : (\n                  <>+ {destinationTokenAccount?.balance?.formatUnits()}</>\n                )}\n              </SwapAmount>\n            </SwapInfo>\n          </SwapColumn>\n        </SwapWrapper>\n      );\n    }\n\n    if (transaction?.loading || sourceTokenAccount?.loading || tokenAmount.loading) {\n      return (\n        <SendWrapper>\n          <Skeleton width={70} height={53} />\n        </SendWrapper>\n      );\n    }\n\n    if (tokenAmount.balance) {\n      return (\n        <SendWrapper>\n          <ValueCurrency>\n            {transaction?.details.isReceiver ? '+' : '-'} {tokenAmount.balance.formatUnits()}\n          </ValueCurrency>\n          <ValueOriginal>\n            <AmountUSD\n              prefix={transaction?.details.isReceiver ? '+' : '-'}\n              value={tokenAmount.balance}\n            />\n          </ValueOriginal>\n        </SendWrapper>\n      );\n    }\n\n    return null;\n  };\n\n  const date = transaction?.raw?.blockTime\n    ? dayjs.unix(transaction.raw.blockTime).format('LLL')\n    : `${transaction?.raw?.slot} SLOT`;\n\n  const isShowFeeBadge =\n    transaction?.data instanceof TransferTransaction && transaction.data.wasPaidByP2POrg;\n\n  return (\n    <Wrapper>\n      <Header>\n        <Title>{titleCase(transaction?.details.type)}</Title>\n        <Desc title={`${transaction?.raw?.slot} SLOT`}>{date}</Desc>\n        <CloseWrapper onClick={close}>\n          <CloseIcon name=\"close\" />\n        </CloseWrapper>\n        <BlockWrapper>\n          {transaction?.details.icon ? <OtherIcon name={transaction.details.icon} /> : undefined}\n        </BlockWrapper>\n      </Header>\n      <ProgressWrapper />\n      <Content>\n        {/* {details.typeOriginal === 'transfer' ? ( */}\n        {/*  <SendWrapper> */}\n        {/*    <ValueCurrency> */}\n        {/*      {details.isReceiver ? '+' : '-'} {details.sourceAmount.toNumber()}{' '} */}\n        {/*      {details.sourceToken?.symbol} */}\n        {/*    </ValueCurrency> */}\n        {/*    <ValueOriginal> */}\n        {/*      <AmountUSD */}\n        {/*        prefix={details.isReceiver ? '+' : '-'} */}\n        {/*        symbol={details.sourceToken?.symbol} */}\n        {/*        value={details.sourceAmount} */}\n        {/*      /> */}\n        {/*    </ValueOriginal> */}\n        {/*  </SendWrapper> */}\n        {/* ) : undefined} */}\n\n        {renderAmountBlock()}\n        <StatusWrapper>\n          <Status>\n            <StatusIndicator\n              className={classNames({\n                error: !!transaction?.raw?.meta?.err,\n                // processing: !transaction?.raw?.slot,\n              })}\n            />{' '}\n            {transaction?.raw?.meta?.err\n              ? 'Failed'\n              : !transaction?.raw?.slot\n              ? 'Pending'\n              : 'Completed'}\n          </Status>\n        </StatusWrapper>\n        <FieldsWrapper>\n          {isShowDetails ? (\n            <>\n              {renderFromTo()}\n              {(sourceTokenAccount?.balance && destinationTokenAccount?.balance) ||\n              tokenAmount?.balance ? (\n                <FieldWrapper>\n                  <FieldTitle>Amount</FieldTitle>\n                  <FieldValue>\n                    {transaction?.data instanceof SwapTransaction ? (\n                      <>\n                        {sourceTokenAccount?.balance?.formatUnits()} to{' '}\n                        {destinationTokenAccount?.balance?.formatUnits()}\n                      </>\n                    ) : (\n                      <>{tokenAmount?.balance?.formatUnits()}</>\n                    )}\n                  </FieldValue>\n                </FieldWrapper>\n              ) : undefined}\n              {tokenAmount.balance ? (\n                <FieldWrapper>\n                  <FieldTitle>Value</FieldTitle>\n                  <FieldValue>\n                    <AmountUSD value={tokenAmount.balance} />\n                  </FieldValue>\n                </FieldWrapper>\n              ) : undefined}\n              {transaction?.raw?.meta ? (\n                <FieldWrapper>\n                  <FieldTitleWrapper>\n                    <FieldTitle>Transaction fee</FieldTitle>\n                    {isShowFeeBadge ? <PaidByBadge>Paid by p2p.org</PaidByBadge> : undefined}\n                  </FieldTitleWrapper>\n                  <FieldValue>{transaction.raw.meta?.fee} lamports</FieldValue>\n                </FieldWrapper>\n              ) : null}\n              <FieldWrapper>\n                <FieldTitle>Block number</FieldTitle>\n                <FieldValue>#{transaction?.raw?.slot}</FieldValue>\n              </FieldWrapper>\n            </>\n          ) : undefined}\n          <FieldWrapper>\n            <FieldTitle>Transaction ID</FieldTitle>\n            <FieldValue>\n              {signature}{' '}\n              <a\n                href={getExplorerUrl('tx', signature, network)}\n                target=\"_blank\"\n                rel=\"noopener noreferrer noindex\"\n                className=\"button\"\n              >\n                <ShareWrapper>\n                  <ShareIcon name=\"external\" />\n                </ShareWrapper>\n              </a>\n            </FieldValue>\n          </FieldWrapper>\n        </FieldsWrapper>\n      </Content>\n      <Footer className={classNames({ isCentered: true })}>\n        <ButtonExplorer lightGray onClick={handleToggleShowDetailsClick}>\n          {isShowDetails ? 'Hide transaction details' : 'Show transaction details'}\n        </ButtonExplorer>\n      </Footer>\n    </Wrapper>\n  );\n};\n"],"sourceRoot":""}