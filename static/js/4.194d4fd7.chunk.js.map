{"version":3,"sources":["components/ui/Modal/Modal.tsx","components/modals/TransactionConfirmModal/common/styled.ts","components/modals/TransactionConfirmModal/Send/Send.tsx","components/modals/TransactionConfirmModal/Swap/Swap.tsx","components/modals/TransactionConfirmModal/TransactionConfirmModal.tsx"],"names":["easing","BezierEasing","AnimatedDialogContent","animated","StyledDialogContent","props","mobile","Header","Delimiter","IconWrapper","IconStyled","Title","Description","CloseIcon","Content","Footer","Modal","className","useState","isMobile","useIsMobile","useEffect","setIsOpen","config","useMemo","duration","t","from","transform","enter","leave","fadeTransition","useTransition","isOpen","useSpring","y","mass","tension","friction","bind","useDrag","state","set","close","item","style","n","title","description","name","onClick","classNames","hasIcon","Boolean","iconName","children","footer","Section","SectionTitle","FieldInfo","WalletIcon","InfoWrapper","InfoTitle","Username","InfoValue","ArrowWrapper","ArrowIconWrapper","ArrowIcon","Send","params","symbol","address","size","value","medium","Swap","minimumOutputAmount","tokenConfigs","useConfig","formatBigNumber","inputAmount","WrapperModal","SubTitle","ActionTitle","PasswordInputStyled","SendIcon","TransactionConfirmModal","walletProviderInfo","useWallet","tryUnlockSeedAndMnemonic","useTryUnlockSeedAndMnemonic","validatePassword","a","setHasError","handleConfirmClick","handleCloseClick","isSecretKeyWallet","DEFAULT_WALLET_PROVIDERS","DefaultWalletType","isDisabled","password","renderTitle","action","primary","disabled","renderButtons","type","onChange","setPassword","hasError","error","noIcon"],"mappings":"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","file":"static/js/4.194d4fd7.chunk.js","sourcesContent":["import type { FunctionComponent } from 'react';\nimport { useEffect, useMemo, useState } from 'react';\nimport * as React from 'react';\nimport { animated, useSpring, useTransition } from 'react-spring';\n\nimport { styled } from '@linaria/react';\nimport { theme, up, useIsMobile } from '@p2p-wallet-web/ui';\nimport { DialogContent } from '@reach/dialog';\nimport { useDrag } from '@use-gesture/react';\nimport BezierEasing from 'bezier-easing';\nimport classNames from 'classnames';\n\nimport { MOBILE_FOOTER_TABS_HEIGHT } from 'components/common/Layout';\nimport { Icon } from 'components/ui';\n\nconst easing = BezierEasing(0.7, -0.4, 0.4, 1.4);\n\nconst AnimatedDialogContent = animated(DialogContent);\n\nconst StyledDialogContent = styled(({ ...props }) => <AnimatedDialogContent {...props} />)`\n  overflow-y: ${({ mobile }) => (mobile ? 'scroll' : 'hidden')};\n\n  &[data-reach-dialog-content] {\n    position: fixed;\n    right: 0;\n    bottom: ${MOBILE_FOOTER_TABS_HEIGHT}px;\n\n    display: flex;\n    flex-direction: column;\n    align-self: flex-end;\n    width: 100vw;\n    height: 80vh;\n    margin: 0;\n    padding: 0;\n    overflow-x: hidden;\n    overflow-y: scroll;\n\n    background: ${theme.colors.bg.primary};\n    border-radius: 18px 18px 0 0;\n\n    touch-action: none;\n\n    ${up.tablet} {\n      position: relative;\n      right: unset;\n      bottom: unset;\n\n      align-self: center;\n      width: unset;\n      height: unset;\n      margin: 0;\n      overflow-y: hidden;\n\n      border-radius: 12px;\n    }\n  }\n`;\n\nconst Header = styled.div`\n  position: relative;\n\n  display: inline-flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n\n  min-height: 74px;\n`;\n\nconst Delimiter = styled.div`\n  position: relative;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  &.hasIcon {\n    height: 44px;\n\n    ${up.tablet} {\n      height: 56px;\n    }\n  }\n\n  &::before {\n    position: absolute;\n\n    width: 100%;\n    height: 1px;\n\n    background: ${theme.colors.stroke.secondary};\n\n    content: '';\n  }\n`;\n\nconst IconWrapper = styled.div`\n  z-index: 1;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  width: 44px;\n  height: 44px;\n\n  border-radius: 12px;\n\n  ${up.tablet} {\n    width: 56px;\n    height: 56px;\n  }\n\n  &.warning {\n    background: ${theme.colors.system.warningMain};\n  }\n`;\n\nconst IconStyled = styled(Icon)`\n  width: 24px;\n  height: 24px;\n\n  color: ${theme.colors.textIcon.buttonPrimary};\n\n  ${up.tablet} {\n    width: 32px;\n    height: 32px;\n  }\n`;\n\nconst Title = styled.div`\n  color: ${theme.colors.textIcon.primary};\n  font-weight: 500;\n  font-size: 20px;\n  line-height: 140%;\n  letter-spacing: 0.01em;\n`;\n\nconst Description = styled.div`\n  color: ${theme.colors.textIcon.secondary};\n  font-weight: 500;\n  font-size: 14px;\n  line-height: 120%;\n  letter-spacing: 0.01em;\n`;\n\nconst CloseIcon = styled(Icon)`\n  position: absolute;\n  top: 25px;\n  right: 20px;\n\n  width: 24px;\n  height: 24px;\n\n  color: ${theme.colors.textIcon.active};\n\n  cursor: pointer;\n`;\n\nconst Content = styled.div`\n  padding: 0 16px;\n\n  ${up.tablet} {\n    padding: 0 20px;\n  }\n`;\n\nconst Footer = styled.div`\n  display: grid;\n  grid-auto-flow: row;\n  grid-gap: 16px;\n  margin-bottom: 16px;\n  padding: 0 16px;\n\n  ${up.tablet} {\n    grid-auto-flow: column;\n    padding: 20px;\n  }\n`;\n\ntype Props = {\n  title?: React.ReactNode;\n  description?: React.ReactNode;\n  footer?: React.ReactNode;\n  iconName?: string;\n  iconBgClassName?: string;\n  close: () => void;\n  className?: string;\n};\n\nexport const Modal: FunctionComponent<Props> = ({\n  title,\n  description,\n  footer,\n  iconName,\n  iconBgClassName,\n\n  close,\n  children,\n  className,\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const isMobile = useIsMobile();\n\n  useEffect(() => {\n    setIsOpen(true);\n\n    return () => {\n      setIsOpen(false);\n    };\n  }, []);\n\n  const config = useMemo(() => {\n    if (isMobile) {\n      return {\n        config: { duration: 600, easing: (t: number) => easing(t) },\n        from: { transform: 'translateY(100px)' },\n        enter: { transform: 'translateX(0)' },\n        leave: { transform: 'translateY(100px)' },\n      };\n    }\n\n    return {\n      // config: { duration: 600, easing: (t: number) => easing(t) },\n      // from: { transform: 'translateX(422px)' },\n      // enter: { transform: 'translateX(0)' },\n      // leave: { transform: 'translateX(422px)' },\n    };\n  }, [isMobile]);\n\n  const fadeTransition = useTransition(isOpen, null, config);\n\n  const [{ y }, set] = useSpring(() => ({ y: 0, config: { mass: 1, tension: 210, friction: 20 } }));\n  const bind = useDrag((state) => {\n    set({\n      y: state.down ? state.movement[1] : 0,\n    });\n    if (state.movement[1] > 300 || (state.velocity[1] > 3 && state.direction[1] > 0)) {\n      close();\n    }\n  });\n\n  return (\n    <>\n      {fadeTransition.map(\n        ({ item, key, props }) =>\n          item && (\n            <StyledDialogContent\n              key={key}\n              {...(isMobile\n                ? {\n                    ...bind(),\n                    style: {\n                      ...props,\n                      transform: y.interpolate((n) => `translateY(${(n as number) > 0 ? n : 0}px)`),\n                    },\n                  }\n                : {\n                    style: props,\n                  })}\n              aria-label=\"dialog\"\n              className={className}\n            >\n              <Header>\n                {title ? <Title>{title}</Title> : undefined}\n                {description ? <Description>{description}</Description> : undefined}\n                {!isMobile ? <CloseIcon name=\"cross\" onClick={close} /> : undefined}\n              </Header>\n              <Delimiter className={classNames({ hasIcon: Boolean(iconName) })}>\n                {iconName ? (\n                  <IconWrapper className={iconBgClassName}>\n                    <IconStyled name={iconName} />\n                  </IconWrapper>\n                ) : undefined}\n              </Delimiter>\n              {children ? <Content>{children}</Content> : undefined}\n              {footer ? <Footer>{footer}</Footer> : undefined}\n            </StyledDialogContent>\n          ),\n      )}\n    </>\n  );\n};\n","import { styled } from '@linaria/react';\nimport { theme } from '@p2p-wallet-web/ui';\n\nimport { Icon } from 'components/ui';\n\nexport const Section = styled.div`\n  display: grid;\n  padding: 20px 0;\n\n  &.swap {\n    padding: 20px 0 0;\n  }\n\n  &.send {\n    grid-gap: 16px;\n    padding: 16px 0;\n  }\n\n  &.password {\n    padding: 8px 0 24px;\n  }\n`;\n\nexport const SectionTitle = styled.div`\n  color: #a3a5ba;\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 140%;\n`;\n\nexport const FieldInfo = styled.div`\n  display: flex;\n  align-items: center;\n  padding: 12px 20px;\n\n  border: 1px solid ${theme.colors.stroke.secondary};\n  border-radius: 12px;\n`;\n\nexport const WalletIcon = styled(Icon)`\n  width: 24px;\n  height: 24px;\n\n  color: ${theme.colors.textIcon.secondary};\n`;\n\nexport const IconWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 44px;\n  height: 44px;\n\n  background: ${theme.colors.bg.secondary};\n  border-radius: 12px;\n`;\n\nexport const InfoWrapper = styled.div`\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  justify-content: center;\n  margin: 0 9px 0 12px;\n`;\n\nexport const InfoTitle = styled.div`\n  color: ${theme.colors.textIcon.primary};\n  font-weight: 500;\n  font-size: 16px;\n  line-height: 140%;\n\n  &.secondary {\n    color: ${theme.colors.textIcon.secondary};\n    font-size: 14px;\n    line-height: 120%;\n  }\n`;\n\nexport const Username = styled(InfoTitle)`\n  color: #000;\n  font-size: 16px;\n`;\n\nexport const InfoValue = styled.div`\n  margin-top: 4px;\n\n  color: ${theme.colors.textIcon.secondary};\n  font-weight: 500;\n  font-size: 14px;\n  line-height: 120%;\n  letter-spacing: 0.01em;\n`;\n","import type { FC } from 'react';\n\nimport { styled } from '@linaria/react';\nimport type { TokenAccount } from '@p2p-wallet-web/core';\nimport { theme } from '@p2p-wallet-web/ui';\nimport type { TokenAmount } from '@saberhq/token-utils';\nimport type { PublicKey } from '@solana/web3.js';\nimport { Feature } from 'flagged';\n\nimport { AddressText } from 'components/common/AddressText';\nimport { AmountUSD } from 'components/common/AmountUSD';\nimport { TokenAvatar } from 'components/common/TokenAvatar';\nimport { TransactionDetails } from 'components/common/TransactionDetails';\nimport { Icon } from 'components/ui';\nimport { FEATURE_TRANSACTION_DETAILS_ACCORDION } from 'config/featureFlags';\n\nimport {\n  FieldInfo,\n  IconWrapper,\n  InfoTitle,\n  InfoValue,\n  InfoWrapper,\n  Section,\n  Username,\n  WalletIcon,\n} from '../common/styled';\n\nconst ArrowWrapper = styled.div`\n  position: relative;\n\n  height: 16px;\n  margin-left: 26px;\n`;\n\nconst ArrowIconWrapper = styled.div`\n  position: relative;\n  top: -8px;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 32px;\n  height: 32px;\n\n  color: ${theme.colors.textIcon.active};\n\n  background: ${theme.colors.bg.primary};\n  border: 1px solid ${theme.colors.stroke.secondary};\n  border-radius: 12px;\n\n  &::before,\n  &::after {\n    position: absolute;\n\n    width: 1px;\n    height: 16px;\n\n    background: ${theme.colors.bg.primary};\n\n    content: '';\n  }\n\n  &::before {\n    left: -1px;\n  }\n\n  &::after {\n    right: -1px;\n  }\n`;\n\nconst ArrowIcon = styled(Icon)`\n  width: 16px;\n  height: 16px;\n`;\n\nexport type TransferParams = {\n  source: TokenAccount;\n  destination: PublicKey;\n  amount: TokenAmount;\n  username?: string;\n};\n\ninterface Props {\n  params: TransferParams;\n}\n\nexport const Send: FC<Props> = ({ params }) => {\n  return (\n    <Section className=\"send\">\n      <div>\n        <FieldInfo>\n          <TokenAvatar\n            symbol={params.source.balance?.token.symbol}\n            address={params.source.balance?.token.address}\n            size={44}\n          />\n          <InfoWrapper>\n            <InfoTitle>{params.amount.formatUnits()}</InfoTitle>\n            <InfoValue>\n              <AmountUSD value={params.amount} />\n            </InfoValue>\n          </InfoWrapper>\n        </FieldInfo>\n        <ArrowWrapper>\n          <ArrowIconWrapper>\n            <ArrowIcon name=\"arrow-down\" />\n          </ArrowIconWrapper>\n        </ArrowWrapper>\n        <FieldInfo>\n          <IconWrapper>\n            <WalletIcon name=\"wallet\" />\n          </IconWrapper>\n          <InfoWrapper>\n            {params.username ? (\n              <Username>{params.username}</Username>\n            ) : (\n              <InfoTitle className=\"secondary\">To address</InfoTitle>\n            )}\n            <InfoValue>\n              <AddressText address={params.destination.toBase58()} medium />\n            </InfoValue>\n          </InfoWrapper>\n        </FieldInfo>\n      </div>\n\n      <Feature name={FEATURE_TRANSACTION_DETAILS_ACCORDION}>\n        <TransactionDetails />\n      </Feature>\n    </Section>\n  );\n};\n","import type { FC } from 'react';\n\nimport type { u64 } from '@solana/spl-token';\n\nimport { useConfig } from 'app/contexts/solana/swap';\nimport { formatBigNumber } from 'app/contexts/solana/swap/utils/format';\nimport { TokenAvatar } from 'components/common/TokenAvatar';\n\nimport {\n  FieldInfo,\n  InfoTitle,\n  InfoValue,\n  InfoWrapper,\n  Section,\n  SectionTitle,\n} from '../common/styled';\n\nexport type SwapParams = {\n  inputTokenName: string;\n  outputTokenName: string;\n  inputAmount: u64;\n  minimumOutputAmount: u64;\n};\n\ninterface Props {\n  params: SwapParams;\n}\n\nexport const Swap: FC<Props> = ({\n  params: { inputTokenName, outputTokenName, inputAmount, minimumOutputAmount },\n}) => {\n  const { tokenConfigs } = useConfig();\n\n  return (\n    <>\n      <Section className=\"swap\">\n        <SectionTitle>From</SectionTitle>\n        <FieldInfo>\n          <TokenAvatar symbol={inputTokenName} size={44} />\n          <InfoWrapper>\n            <InfoTitle>Check the amount</InfoTitle>\n            <InfoValue>\n              {formatBigNumber(inputAmount, tokenConfigs[inputTokenName].decimals)} {inputTokenName}\n            </InfoValue>\n          </InfoWrapper>\n        </FieldInfo>\n      </Section>\n      <Section className=\"top\">\n        <SectionTitle>To</SectionTitle>\n        <FieldInfo>\n          <TokenAvatar symbol={outputTokenName} size={44} />\n          <InfoWrapper>\n            <InfoTitle>Minimum receive</InfoTitle>\n            <InfoValue>\n              {formatBigNumber(minimumOutputAmount, tokenConfigs[outputTokenName].decimals)}{' '}\n              {outputTokenName}\n            </InfoValue>\n          </InfoWrapper>\n        </FieldInfo>\n        {/*<FieldInfo>*/}\n        {/*  <IconWrapper>*/}\n        {/*    <WalletIcon name=\"wallet\" />*/}\n        {/*  </IconWrapper>*/}\n        {/*  <InfoWrapper>*/}\n        {/*    <InfoTitle>Destination wallet</InfoTitle>*/}\n        {/*    <InfoValue>*/}\n        {/*      {(params as SwapParams).secondTokenAccount*/}\n        {/*        ? (params as SwapParams).secondTokenAccount.address.toBase58()*/}\n        {/*        : 'Will be created after transaction processing'}*/}\n        {/*    </InfoValue>*/}\n        {/*  </InfoWrapper>*/}\n        {/*</FieldInfo>*/}\n      </Section>\n    </>\n  );\n};\n","import type { FunctionComponent } from 'react';\nimport { useState } from 'react';\n\nimport { styled } from '@linaria/react';\nimport {\n  DEFAULT_WALLET_PROVIDERS,\n  DefaultWalletType,\n  useTryUnlockSeedAndMnemonic,\n  useWallet,\n} from '@p2p-wallet-web/core';\nimport { theme } from '@p2p-wallet-web/ui';\n\nimport type { ModalPropsType } from 'app/contexts/general/modals/types';\nimport { ErrorHint } from 'components/common/ErrorHint';\nimport { PasswordInput } from 'components/common/PasswordInput';\nimport { Button, ButtonCancel, Icon } from 'components/ui';\nimport { Modal } from 'components/ui/Modal';\n\nimport { Section } from './common/styled';\nimport type { TransferParams } from './Send';\nimport { Send } from './Send';\nimport type { SwapParams } from './Swap';\nimport { Swap } from './Swap';\n\nconst WrapperModal = styled(Modal)`\n  flex-basis: 524px;\n`;\n\nconst SubTitle = styled.span`\n  display: flex;\n  margin-bottom: 8px;\n\n  color: ${theme.colors.textIcon.primary};\n  font-weight: 500;\n  font-size: 16px;\n  line-height: 140%;\n  letter-spacing: 0.01em;\n`;\n\nconst ActionTitle = styled.div`\n  padding: 16px 0 0 16px;\n\n  color: ${theme.colors.textIcon.primary};\n  font-weight: 500;\n  font-size: 16px;\n  line-height: 140%;\n  letter-spacing: 0.01em;\n`;\n\nconst PasswordInputStyled = styled(PasswordInput)`\n  height: 46px;\n`;\n\nconst SendIcon = styled(Icon)`\n  width: 24px;\n  height: 24px;\n  margin-right: 12px;\n`;\n\nexport type TransactionConfirmModalProps = {\n  type: 'send' | 'swap';\n  params: TransferParams | SwapParams;\n};\n\nexport const TransactionConfirmModal: FunctionComponent<\n  ModalPropsType & TransactionConfirmModalProps\n> = ({ type, params, close }) => {\n  const { walletProviderInfo } = useWallet();\n  const tryUnlockSeedAndMnemonic = useTryUnlockSeedAndMnemonic();\n\n  const [password, setPassword] = useState('');\n  const [hasError, setHasError] = useState(false);\n\n  const validatePassword = async (password: string) => {\n    try {\n      await tryUnlockSeedAndMnemonic(password);\n      setHasError(false);\n    } catch (error) {\n      setHasError(true);\n    }\n  };\n\n  const handlePasswordChange = (value: string) => {\n    setPassword(value);\n\n    if (value) {\n      void validatePassword(value);\n    }\n  };\n\n  const handleConfirmClick = () => {\n    close(true);\n  };\n\n  const handleCloseClick = () => {\n    close(false);\n  };\n\n  const isSecretKeyWallet =\n    walletProviderInfo?.name === DEFAULT_WALLET_PROVIDERS[DefaultWalletType.SecretKey].name;\n  const isDisabled = isSecretKeyWallet && (!password || hasError);\n\n  const renderTitle = () => {\n    switch (type) {\n      case 'send':\n        return <>Confirm sending {(params as TransferParams).source.balance?.token.symbol}</>;\n      default:\n        return 'Double check and confirm';\n    }\n  };\n\n  const renderDescription = () => {\n    switch (type) {\n      case 'swap':\n        return 'Swap transaction';\n      default:\n        return null;\n    }\n  };\n\n  const renderButtons = () => {\n    let action;\n\n    switch (type) {\n      case 'swap':\n        action = 'Confirm and send';\n        break;\n      case 'send':\n      default:\n        action = (\n          <>\n            <SendIcon name=\"top\" />\n            Send {(params as TransferParams).amount.formatUnits()}\n          </>\n        );\n        break;\n    }\n\n    return (\n      <>\n        <Button primary disabled={isDisabled} onClick={handleConfirmClick}>\n          {action}\n        </Button>\n        <ButtonCancel onClick={handleCloseClick} />\n      </>\n    );\n  };\n\n  return (\n    <WrapperModal\n      title={renderTitle()}\n      description={renderDescription()}\n      close={handleCloseClick}\n      footer={renderButtons()}\n    >\n      {type === 'send' ? <ActionTitle>You are going to send</ActionTitle> : undefined}\n      {type === 'send' ? <Send params={params as TransferParams} /> : undefined}\n      {type === 'swap' ? <Swap params={params as SwapParams} /> : undefined}\n\n      {isSecretKeyWallet ? (\n        <Section className=\"password\">\n          <SubTitle>Enter password to confirm</SubTitle>\n          <PasswordInputStyled value={password} onChange={handlePasswordChange} />\n          {hasError ? <ErrorHint error=\"Incorrect password, try again\" noIcon /> : undefined}\n        </Section>\n      ) : undefined}\n    </WrapperModal>\n  );\n};\n"],"sourceRoot":""}