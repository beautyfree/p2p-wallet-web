{"version":3,"sources":["components/ui/Modal/Modal.tsx","components/common/ButtonCancel/ButtonCancel.tsx","components/modals/TransactionConfirmModal/common/styled.ts","components/common/TransactionDetails/TransactionDetails.tsx","components/modals/TransactionConfirmModal/Send/Send.tsx","components/modals/TransactionConfirmModal/Swap/Swap.tsx","components/modals/TransactionConfirmModal/TransactionConfirmModal.tsx"],"names":["easing","BezierEasing","AnimatedDialogContent","animated","StyledDialogContent","props","mobile","Handle","Header","Delimiter","IconWrapper","IconStyled","Title","Description","CloseIcon","Content","Footer","Modal","children","useState","isMobile","useIsMobile","location","useLocation","currentPath","useRef","useEffect","close","doNotCloseOnPathChangeMobile","setIsOpen","config","useMemo","duration","t","from","transform","enter","leave","fadeTransition","useTransition","isOpen","useSpring","y","mass","tension","friction","bind","useDrag","state","set","item","style","n","className","title","description","name","onClick","noDelimiter","classNames","hasIcon","Boolean","iconName","footer","CancelIcon","ButtonCancel","hollow","error","Section","FieldInfo","WalletIcon","InfoWrapper","InfoTitle","Username","InfoValue","Subtitle","Wrapper","FromToWrapper","Overlay","TransactionDetails","sendState","userFreeFeeLimits","useFreeTransactions","useSettings","settings","AccordionTitle","titleBottomName","titleBottomValue","details","totalAmount","open","noContentPadding","receiveAmount","accountCreationAmount","destinationAccount","symbol","undefined","ArrowWrapper","ArrowIconWrapper","ArrowIcon","Send","btcAddress","address","params","size","value","medium","Swap","inputAmount","feeCompensationInfo","tokenConfigs","useConfig","inputDecimals","outputDecimals","minReceiveAmount","formatBigNumber","swapInfo","prefix","amount","tokenName","userTokenAccounts","feeLimitsInfo","priceInfo","solanaProvider","networkFees","forPage","WrapperModal","ModalTitle","SubTitle","ActionTitle","PasswordInputStyled","SendIcon","TransactionConfirmModal","walletProviderInfo","useWallet","tryUnlockSeedAndMnemonic","useTryUnlockSeedAndMnemonic","type","trackEvent","validatePassword","a","setHasError","handleConfirmClick","handleCloseClick","isSecretKeyWallet","DEFAULT_WALLET_PROVIDERS","DefaultWalletType","isDisabled","password","renderTitle","action","primary","disabled","renderButtons","onChange","setPassword","hasError","noIcon"],"mappings":"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","file":"static/js/4.98d2f2e3.chunk.js","sourcesContent":["import type { FunctionComponent } from 'react';\nimport { useEffect, useMemo, useRef, useState } from 'react';\nimport * as React from 'react';\nimport { useLocation } from 'react-router';\nimport { animated, useSpring, useTransition } from 'react-spring';\n\nimport { styled } from '@linaria/react';\nimport { theme, up, useIsMobile } from '@p2p-wallet-web/ui';\nimport { DialogContent } from '@reach/dialog';\nimport { useDrag } from '@use-gesture/react';\nimport BezierEasing from 'bezier-easing';\nimport classNames from 'classnames';\n\nimport { MOBILE_FOOTER_TABS_HEIGHT } from 'components/common/Layout';\nimport { Icon } from 'components/ui';\n\n// eslint-disable-next-line @typescript-eslint/no-magic-numbers\nconst easing = BezierEasing(0.7, -0.4, 0.4, 1.4);\n\nconst AnimatedDialogContent = animated(DialogContent);\n\nconst DRAG_MOVEMENT_THRESHOLD = 300;\nconst DRAG_VELOCITY_THRESHOLD = 3;\n\nconst StyledDialogContent = styled(({ ...props }) => <AnimatedDialogContent {...props} />)`\n  overflow-y: ${({ mobile }) => (mobile ? 'scroll' : 'hidden')};\n\n  &[data-reach-dialog-content] {\n    position: fixed;\n    right: 0;\n    bottom: ${MOBILE_FOOTER_TABS_HEIGHT}px;\n\n    display: flex;\n    flex-direction: column;\n    align-self: flex-end;\n    width: 100%;\n    max-height: 90vh;\n    margin: 0;\n    padding: 0;\n    overflow-x: hidden;\n    overflow-y: scroll;\n\n    background: ${theme.colors.bg.primary};\n    border-radius: 18px 18px 0 0;\n\n    touch-action: none;\n\n    ${up.tablet} {\n      position: relative;\n      right: unset;\n      bottom: unset;\n\n      align-self: center;\n      width: unset;\n      height: unset;\n      margin: 0;\n      overflow-y: hidden;\n\n      border-radius: 12px;\n    }\n  }\n`;\n\nconst Handle = styled.div`\n  position: relative;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 16px;\n\n  &::before {\n    position: absolute;\n\n    width: 31px;\n    height: 4px;\n\n    background: ${theme.colors.textIcon.buttonDisabled};\n\n    content: '';\n  }\n`;\n\nconst Header = styled.div`\n  position: relative;\n\n  display: inline-flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n\n  min-height: 74px;\n`;\n\nconst Delimiter = styled.div`\n  position: relative;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  &.hasIcon {\n    height: 44px;\n\n    ${up.tablet} {\n      height: 56px;\n    }\n  }\n\n  &::before {\n    position: absolute;\n\n    width: 100%;\n    height: 1px;\n\n    background: ${theme.colors.stroke.secondary};\n\n    content: '';\n  }\n`;\n\nconst IconWrapper = styled.div`\n  z-index: 1;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  width: 44px;\n  height: 44px;\n\n  border-radius: 12px;\n\n  ${up.tablet} {\n    width: 56px;\n    height: 56px;\n  }\n\n  &.warning {\n    background: ${theme.colors.system.warningMain};\n  }\n`;\n\nconst IconStyled = styled(Icon)`\n  width: 24px;\n  height: 24px;\n\n  color: ${theme.colors.textIcon.buttonPrimary};\n\n  ${up.tablet} {\n    width: 32px;\n    height: 32px;\n  }\n`;\n\nconst Title = styled.div`\n  color: ${theme.colors.textIcon.primary};\n  font-weight: 500;\n  font-size: 20px;\n  line-height: 140%;\n  letter-spacing: 0.01em;\n`;\n\nconst Description = styled.div`\n  color: ${theme.colors.textIcon.secondary};\n  font-weight: 500;\n  font-size: 14px;\n  line-height: 120%;\n  letter-spacing: 0.01em;\n`;\n\nconst CloseIcon = styled(Icon)`\n  position: absolute;\n  top: 25px;\n  right: 20px;\n\n  width: 24px;\n  height: 24px;\n\n  color: ${theme.colors.textIcon.active};\n\n  cursor: pointer;\n`;\n\nconst Content = styled.div`\n  padding: 0 16px;\n\n  ${up.tablet} {\n    padding: 0 20px;\n  }\n`;\n\nconst Footer = styled.div`\n  display: grid;\n  grid-auto-flow: row;\n  grid-gap: 16px;\n  margin-bottom: 16px;\n  padding: 0 16px;\n\n  ${up.tablet} {\n    grid-auto-flow: column;\n    padding: 20px;\n  }\n`;\n\ntype Props = {\n  title?: React.ReactNode;\n  description?: React.ReactNode;\n  footer?: React.ReactNode;\n  iconName?: string;\n  iconBgClassName?: string;\n\n  noDelimiter: boolean;\n  close: () => void;\n  doNotCloseOnPathChangeMobile?: boolean;\n  className?: string;\n};\n\nexport const Modal: FunctionComponent<Props> = ({\n  title,\n  description,\n  footer,\n  iconName,\n  iconBgClassName,\n\n  noDelimiter,\n  close,\n  doNotCloseOnPathChangeMobile,\n  className,\n\n  children,\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const isMobile = useIsMobile();\n  const location = useLocation();\n  const currentPath = useRef(location.pathname);\n\n  useEffect(() => {\n    if (isMobile && !doNotCloseOnPathChangeMobile && currentPath.current !== location.pathname) {\n      close();\n    }\n  }, [isMobile, doNotCloseOnPathChangeMobile, location.pathname]);\n\n  useEffect(() => {\n    setIsOpen(true);\n\n    return () => {\n      setIsOpen(false);\n    };\n  }, []);\n\n  const config = useMemo(() => {\n    if (isMobile) {\n      return {\n        config: { duration: 600, easing: (t: number) => easing(t) },\n        from: { transform: 'translateY(100px)' },\n        enter: { transform: 'translateX(0)' },\n        leave: { transform: 'translateY(100px)' },\n      };\n    }\n\n    return {\n      // config: { duration: 600, easing: (t: number) => easing(t) },\n      // from: { transform: 'translateX(422px)' },\n      // enter: { transform: 'translateX(0)' },\n      // leave: { transform: 'translateX(422px)' },\n    };\n  }, [isMobile]);\n\n  const fadeTransition = useTransition(isOpen, null, config);\n\n  const [{ y }, set] = useSpring(() => ({ y: 0, config: { mass: 1, tension: 210, friction: 20 } }));\n  const bind = useDrag((state) => {\n    set({\n      y: state.down ? state.movement[1] : 0,\n    });\n    if (\n      state.movement[1] > DRAG_MOVEMENT_THRESHOLD ||\n      (state.velocity[1] > DRAG_VELOCITY_THRESHOLD && state.direction[1] > 0)\n    ) {\n      close();\n    }\n  });\n\n  return (\n    <>\n      {fadeTransition.map(\n        ({ item, key, props }) =>\n          item && (\n            <StyledDialogContent\n              key={key}\n              {...(isMobile\n                ? {\n                    ...bind(),\n                    style: {\n                      ...props,\n                      transform: y.interpolate((n) => `translateY(${(n as number) > 0 ? n : 0}px)`),\n                    },\n                  }\n                : {\n                    style: props,\n                  })}\n              aria-label=\"dialog\"\n              className={className}\n            >\n              {isMobile ? <Handle /> : undefined}\n              {title || description ? (\n                <Header>\n                  {title ? <Title>{title}</Title> : undefined}\n                  {description ? <Description>{description}</Description> : undefined}\n                  {!isMobile ? <CloseIcon name=\"cross\" onClick={close} /> : undefined}\n                </Header>\n              ) : undefined}\n              {!noDelimiter ? (\n                <Delimiter className={classNames({ hasIcon: Boolean(iconName) })}>\n                  {iconName ? (\n                    <IconWrapper className={iconBgClassName}>\n                      <IconStyled name={iconName} />\n                    </IconWrapper>\n                  ) : undefined}\n                </Delimiter>\n              ) : undefined}\n              {children ? <Content>{children}</Content> : undefined}\n              {footer ? <Footer>{footer}</Footer> : undefined}\n            </StyledDialogContent>\n          ),\n      )}\n    </>\n  );\n};\n","import type { FC } from 'react';\nimport * as React from 'react';\n\nimport { styled } from '@linaria/react';\n\nimport { Button, Icon } from 'components/ui';\n\nconst CancelIcon = styled(Icon)`\n  width: 24px;\n  height: 24px;\n  margin-right: 8px;\n`;\n\ntype Props = React.ButtonHTMLAttributes<HTMLButtonElement>;\n\nexport const ButtonCancel: FC<Props> = (props) => {\n  return (\n    <Button {...props} hollow error>\n      <CancelIcon name=\"cross\" />\n      Cancel\n    </Button>\n  );\n};\n","import { styled } from '@linaria/react';\nimport { theme } from '@p2p-wallet-web/ui';\n\nimport type { IconProps } from 'components/ui';\nimport { Icon } from 'components/ui';\n\nexport const Section = styled.div`\n  display: grid;\n  padding: 20px 0;\n\n  &.swap {\n    padding: 20px 0 0;\n  }\n\n  &.send {\n    grid-gap: 16px;\n    padding: 16px 0;\n  }\n\n  &.password {\n    padding: 8px 0 24px;\n  }\n`;\n\nexport const SectionTitle = styled.div`\n  color: #a3a5ba;\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 140%;\n`;\n\nexport const FieldInfo = styled.div`\n  display: flex;\n  align-items: center;\n  padding: 12px 20px;\n\n  border: 1px solid ${theme.colors.stroke.secondary};\n  border-radius: 12px;\n`;\n\nexport const WalletIcon = styled<IconProps>(Icon)`\n  width: 24px;\n  height: 24px;\n\n  color: ${theme.colors.textIcon.secondary};\n`;\n\nexport const IconWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 44px;\n  height: 44px;\n\n  background: ${theme.colors.bg.secondary};\n  border-radius: 12px;\n`;\n\nexport const InfoWrapper = styled.div`\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  justify-content: center;\n  margin: 0 9px 0 12px;\n`;\n\nexport const InfoTitle = styled.div`\n  color: ${theme.colors.textIcon.primary};\n  font-weight: 500;\n  font-size: 16px;\n  line-height: 140%;\n\n  &.secondary {\n    color: ${theme.colors.textIcon.secondary};\n    font-size: 14px;\n    line-height: 120%;\n  }\n`;\n\nexport const Username = styled(InfoTitle)`\n  color: #000;\n  font-size: 16px;\n`;\n\nexport const InfoValue = styled.div`\n  margin-top: 4px;\n\n  color: ${theme.colors.textIcon.secondary};\n  font-weight: 500;\n  font-size: 14px;\n  line-height: 120%;\n  letter-spacing: 0.01em;\n`;\n\nexport const Subtitle = styled.div`\n  margin-left: 20px;\n  margin-top: 16px;\n  font-weight: 500;\n  font-size: 16px;\n  line-height: 140%;\n`;\n\nexport const Wrapper = styled.div`\n  position: relative;\n  margin-bottom: 8px;\n`;\n\nexport const FromToWrapper = styled.div`\n  position: absolute;\n  border: 1px solid ${theme.colors.stroke.secondary};\n  width: 32px;\n  height: 32px;\n  background: ${theme.colors.bg.primary};\n  border-radius: 40%;\n  left: 27px;\n  top: 107px;\n  color: ${theme.colors.textIcon.active};\n\n  svg {\n    width: 20px;\n    height: 20px;\n  }\n`;\n\nexport const Overlay = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 19px;\n\n  position: absolute;\n  width: 34px;\n  top: 5px;\n  left: -2px;\n  background: ${theme.colors.bg.primary};\n`;\n","import type { FC } from 'react';\n\nimport type { UseSendState } from 'app/contexts';\nimport { useSettings } from 'app/contexts';\nimport type { INITIAL_USER_FREE_FEE_LIMITS } from 'app/contexts/api/feeRelayer/utils';\nimport { FeeTransactionTooltip } from 'components/common/TransactionDetails/FeeTransactinTooltip';\nimport { Accordion } from 'components/ui';\nimport { AccordionTitle } from 'components/ui/AccordionDetails/AccordionTitle';\nimport { ListWrapper, Row, Text } from 'components/ui/AccordionDetails/common';\n\nexport interface TransactionDetailsProps {\n  sendState: Pick<UseSendState, 'fromTokenAccount' | 'destinationAccount' | 'details'>;\n  userFreeFeeLimits: typeof INITIAL_USER_FREE_FEE_LIMITS;\n  btcAddress?: string;\n}\n\nexport const TransactionDetails: FC<TransactionDetailsProps> = ({\n  sendState,\n  userFreeFeeLimits,\n}) => {\n  const {\n    settings: { useFreeTransactions },\n  } = useSettings();\n\n  return (\n    <Accordion\n      title={\n        <AccordionTitle\n          title=\"Transaction details\"\n          titleBottomName=\"Total\"\n          titleBottomValue={sendState.details.totalAmount || ''}\n        />\n      }\n      open={false}\n      noContentPadding\n    >\n      <ListWrapper>\n        <Row>\n          <Text className=\"gray\">Receive</Text>\n          <Text>{sendState.details.receiveAmount}</Text>\n        </Row>\n        <Row>\n          <Text className=\"gray\">Transaction fee</Text>\n          {useFreeTransactions ? (\n            <Text>\n              Free{' '}\n              <Text className=\"green inline-flex\">\n                (Paid by P2P.org)\n                <FeeTransactionTooltip userFreeFeeLimits={userFreeFeeLimits} />\n              </Text>\n            </Text>\n          ) : (\n            <Text>1</Text>\n          )}\n        </Row>\n        {sendState.details.accountCreationAmount ? (\n          <Row>\n            <Text className=\"gray\">{sendState.destinationAccount?.symbol} account creation</Text>\n            <Text>{sendState.details.accountCreationAmount}</Text>\n          </Row>\n        ) : undefined}\n      </ListWrapper>\n      <ListWrapper className=\"total\">\n        <Row>\n          <Text>Total</Text>\n          <Text>{sendState.details.totalAmount}</Text>\n        </Row>\n      </ListWrapper>\n    </Accordion>\n  );\n};\n","import type { FC } from 'react';\n\nimport { styled } from '@linaria/react';\nimport type { TokenAccount } from '@p2p-wallet-web/core';\nimport { theme } from '@p2p-wallet-web/ui';\nimport type { TokenAmount } from '@saberhq/token-utils';\nimport type { PublicKey } from '@solana/web3.js';\n\nimport { AddressText } from 'components/common/AddressText';\nimport { AmountUSD } from 'components/common/AmountUSD';\nimport { TokenAvatar } from 'components/common/TokenAvatar';\nimport type { TransactionDetailsProps } from 'components/common/TransactionDetails';\nimport { TransactionDetails } from 'components/common/TransactionDetails';\nimport { Icon } from 'components/ui';\n\nimport {\n  FieldInfo,\n  IconWrapper,\n  InfoTitle,\n  InfoValue,\n  InfoWrapper,\n  Section,\n  Username,\n  WalletIcon,\n} from '../common/styled';\n\nconst ArrowWrapper = styled.div`\n  position: relative;\n\n  height: 16px;\n  margin-left: 26px;\n`;\n\nconst ArrowIconWrapper = styled.div`\n  position: relative;\n  top: -8px;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 32px;\n  height: 32px;\n\n  color: ${theme.colors.textIcon.active};\n\n  background: ${theme.colors.bg.primary};\n  border: 1px solid ${theme.colors.stroke.secondary};\n  border-radius: 12px;\n\n  &::before,\n  &::after {\n    position: absolute;\n\n    width: 1px;\n    height: 16px;\n\n    background: ${theme.colors.bg.primary};\n\n    content: '';\n  }\n\n  &::before {\n    left: -1px;\n  }\n\n  &::after {\n    right: -1px;\n  }\n`;\n\nconst ArrowIcon = styled(Icon)`\n  width: 16px;\n  height: 16px;\n`;\n\nexport type TransferParams = {\n  source: TokenAccount;\n  destination: PublicKey;\n  amount: TokenAmount;\n  username?: string;\n};\n\ninterface Props {\n  params: TransferParams;\n}\n\nexport const Send: FC<Props & TransactionDetailsProps> = ({\n  params,\n  sendState,\n  userFreeFeeLimits,\n  btcAddress,\n}) => {\n  const address = params.destination?.toBase58?.() || btcAddress;\n\n  return (\n    <Section className=\"send\">\n      <div>\n        <FieldInfo>\n          <TokenAvatar\n            symbol={params.source.balance?.token.symbol}\n            address={params.source.balance?.token.address}\n            size={44}\n          />\n          <InfoWrapper>\n            <InfoTitle>{params.amount.formatUnits()}</InfoTitle>\n            <InfoValue>\n              <AmountUSD value={params.amount} />\n            </InfoValue>\n          </InfoWrapper>\n        </FieldInfo>\n        <ArrowWrapper>\n          <ArrowIconWrapper>\n            <ArrowIcon name=\"arrow-down\" />\n          </ArrowIconWrapper>\n        </ArrowWrapper>\n        <FieldInfo>\n          <IconWrapper>\n            <WalletIcon name=\"wallet\" />\n          </IconWrapper>\n          <InfoWrapper>\n            {params.username ? (\n              <Username>{params.username}</Username>\n            ) : (\n              <InfoTitle className=\"secondary\">To address</InfoTitle>\n            )}\n            <InfoValue>{address && <AddressText address={address} medium />}</InfoValue>\n          </InfoWrapper>\n        </FieldInfo>\n      </div>\n\n      <TransactionDetails sendState={sendState} userFreeFeeLimits={userFreeFeeLimits} />\n    </Section>\n  );\n};\n","import type { FC } from 'react';\n\nimport type { u64 } from '@solana/spl-token';\n\nimport { useConfig } from 'app/contexts/solana/swap';\nimport { formatBigNumber } from 'app/contexts/solana/swap/utils/format';\nimport { TokenAvatar } from 'components/common/TokenAvatar';\nimport { AmountUSD } from 'components/pages/swap/SwapWidget/AmountUSD';\nimport type { FeesOriginalProps } from 'components/pages/swap/SwapWidget/Fees/FeesOriginal';\nimport { FeesOriginal } from 'components/pages/swap/SwapWidget/Fees/FeesOriginal';\nimport { Icon } from 'components/ui';\n\nimport {\n  FieldInfo,\n  FromToWrapper,\n  InfoTitle,\n  InfoValue,\n  InfoWrapper,\n  Overlay,\n  Section,\n  Subtitle,\n  Wrapper,\n} from '../common/styled';\n\nexport type SwapParams = {\n  inputTokenName: string;\n  outputTokenName: string;\n  inputAmount: u64;\n  minimumOutputAmount: u64;\n};\n\ninterface Props {\n  params: SwapParams;\n}\n\nexport const Swap: FC<Props & FeesOriginalProps> = ({\n  params: { inputTokenName, outputTokenName, inputAmount },\n  swapInfo,\n  userTokenAccounts,\n  feeLimitsInfo,\n  networkFees,\n  solanaProvider,\n  priceInfo,\n  feeCompensationInfo,\n}) => {\n  const { tokenConfigs } = useConfig();\n  const inputDecimals = tokenConfigs[inputTokenName]?.decimals || 0;\n  const outputDecimals = tokenConfigs[outputTokenName]?.decimals || 0;\n  const minReceiveAmount = formatBigNumber(swapInfo.trade.getMinimumOutputAmount(), outputDecimals);\n\n  return (\n    <Wrapper>\n      <Subtitle>You are going to swap</Subtitle>\n      <Section className=\"swap\">\n        <FieldInfo>\n          <TokenAvatar symbol={inputTokenName} size={44} />\n          <InfoWrapper>\n            <InfoTitle>\n              {formatBigNumber(inputAmount, inputDecimals)} {inputTokenName}\n            </InfoTitle>\n            <InfoValue>\n              <AmountUSD\n                prefix={'~'}\n                amount={swapInfo.trade.getInputAmount()}\n                tokenName={swapInfo.trade.inputTokenName}\n              />\n            </InfoValue>\n          </InfoWrapper>\n        </FieldInfo>\n      </Section>\n      <FromToWrapper>\n        <Overlay>\n          <Icon name={'arrow-down'} />\n        </Overlay>\n      </FromToWrapper>\n      <Section className=\"top\">\n        <FieldInfo>\n          <TokenAvatar symbol={outputTokenName} size={44} />\n          <InfoWrapper>\n            <InfoTitle>\n              {formatBigNumber(swapInfo.trade.getOutputAmount(), outputDecimals)} {outputTokenName}\n            </InfoTitle>\n            <InfoValue>\n              Receive at least: {minReceiveAmount} {swapInfo.trade.outputTokenName}\n            </InfoValue>\n          </InfoWrapper>\n        </FieldInfo>\n      </Section>\n      <FeesOriginal\n        swapInfo={swapInfo}\n        userTokenAccounts={userTokenAccounts}\n        feeCompensationInfo={feeCompensationInfo}\n        feeLimitsInfo={feeLimitsInfo}\n        priceInfo={priceInfo}\n        solanaProvider={solanaProvider}\n        networkFees={networkFees}\n        open={false}\n        forPage={false}\n      />\n    </Wrapper>\n  );\n};\n","import type { FunctionComponent } from 'react';\nimport { useEffect, useState } from 'react';\n\nimport { styled } from '@linaria/react';\nimport {\n  DEFAULT_WALLET_PROVIDERS,\n  DefaultWalletType,\n  useTryUnlockSeedAndMnemonic,\n  useWallet,\n} from '@p2p-wallet-web/core';\nimport { theme } from '@p2p-wallet-web/ui';\n\nimport type { ModalPropsType } from 'app/contexts/general/modals/types';\nimport { ButtonCancel } from 'components/common/ButtonCancel';\nimport { ErrorHint } from 'components/common/ErrorHint';\nimport { PasswordInput } from 'components/common/PasswordInput';\nimport type { TransactionDetailsProps } from 'components/common/TransactionDetails';\nimport type { FeesOriginalProps } from 'components/pages/swap/SwapWidget/Fees/FeesOriginal';\nimport { Button, Icon } from 'components/ui';\nimport { Modal } from 'components/ui/Modal';\nimport { trackEvent } from 'utils/analytics';\n\nimport { Section } from './common/styled';\nimport type { TransferParams } from './Send';\nimport { Send } from './Send';\nimport type { SwapParams } from './Swap';\nimport { Swap } from './Swap';\n\nconst WrapperModal = styled(Modal)`\n  flex-basis: 524px;\n`;\n\nconst ModalTitle = styled.div`\n  font-weight: 500;\n  font-size: 24px;\n  line-height: 140%;\n`;\n\nconst SubTitle = styled.span`\n  display: flex;\n  margin-bottom: 8px;\n\n  color: ${theme.colors.textIcon.primary};\n  font-weight: 500;\n  font-size: 16px;\n  line-height: 140%;\n  letter-spacing: 0.01em;\n`;\n\nconst ActionTitle = styled.div`\n  padding: 16px 0 0 16px;\n\n  color: ${theme.colors.textIcon.primary};\n  font-weight: 500;\n  font-size: 16px;\n  line-height: 140%;\n  letter-spacing: 0.01em;\n`;\n\nconst PasswordInputStyled = styled(PasswordInput)`\n  height: 46px;\n`;\n\nconst SendIcon = styled(Icon)`\n  width: 24px;\n  height: 24px;\n  margin-right: 12px;\n`;\n\ntype ModalParams = {\n  type: 'send' | 'swap';\n  params: TransferParams | SwapParams;\n};\n\nexport type TransactionConfirmModalProps = TransactionDetailsProps &\n  ModalParams &\n  FeesOriginalProps;\n\nexport const TransactionConfirmModal: FunctionComponent<\n  ModalPropsType & TransactionConfirmModalProps\n> = ({\n  type,\n  params,\n  close,\n  btcAddress,\n  swapInfo,\n  sendState,\n  userTokenAccounts,\n  userFreeFeeLimits,\n  feeCompensationInfo,\n  feeLimitsInfo,\n  priceInfo,\n  solanaProvider,\n  networkFees,\n}) => {\n  const { walletProviderInfo } = useWallet();\n  const tryUnlockSeedAndMnemonic = useTryUnlockSeedAndMnemonic();\n\n  const [password, setPassword] = useState('');\n  const [hasError, setHasError] = useState(false);\n\n  useEffect(() => {\n    if (type === 'send') {\n      trackEvent('Send_Reviewing');\n    }\n  }, []);\n\n  const validatePassword = async (value: string) => {\n    try {\n      await tryUnlockSeedAndMnemonic(value);\n      setHasError(false);\n    } catch (error) {\n      setHasError(true);\n    }\n  };\n\n  const handlePasswordChange = (value: string) => {\n    setPassword(value);\n\n    if (value) {\n      void validatePassword(value);\n    }\n  };\n\n  const handleConfirmClick = () => {\n    if (type === 'send') {\n      trackEvent('Send_Verification_Invoked');\n    }\n\n    close(true);\n  };\n\n  const handleCloseClick = () => {\n    close(false);\n  };\n\n  const isSecretKeyWallet =\n    walletProviderInfo?.name === DEFAULT_WALLET_PROVIDERS[DefaultWalletType.SecretKey].name;\n  const isDisabled = isSecretKeyWallet && (!password || hasError);\n\n  const renderTitle = () => {\n    switch (type) {\n      case 'send':\n        return (\n          <ModalTitle>\n            Confirm sending {(params as TransferParams).source.balance?.token.symbol}\n          </ModalTitle>\n        );\n      default:\n        return (\n          <ModalTitle>\n            Confirm swapping {swapInfo.trade.inputTokenName} → {swapInfo.trade.outputTokenName}\n          </ModalTitle>\n        );\n    }\n  };\n\n  const renderButtons = () => {\n    let action;\n\n    switch (type) {\n      case 'swap':\n        action = (\n          <>\n            <SendIcon name=\"swap\" />\n            Swap {swapInfo.trade.inputTokenName} → {swapInfo.trade.outputTokenName}\n          </>\n        );\n        break;\n      case 'send':\n      default:\n        action = (\n          <>\n            <SendIcon name=\"top\" />\n            Send {(params as TransferParams).amount.formatUnits()}\n          </>\n        );\n        break;\n    }\n\n    return (\n      <>\n        <Button primary disabled={isDisabled} onClick={handleConfirmClick}>\n          {action}\n        </Button>\n        <ButtonCancel onClick={handleCloseClick} />\n      </>\n    );\n  };\n\n  return (\n    <WrapperModal\n      title={renderTitle()}\n      close={handleCloseClick}\n      footer={renderButtons()}\n      noDelimiter={false}\n    >\n      {type === 'send' ? <ActionTitle>You are going to send</ActionTitle> : undefined}\n      {type === 'send' ? (\n        <Send\n          params={params as TransferParams}\n          sendState={sendState}\n          userFreeFeeLimits={userFreeFeeLimits}\n          btcAddress={btcAddress}\n        />\n      ) : undefined}\n      {type === 'swap' ? (\n        <Swap\n          params={params as SwapParams}\n          swapInfo={swapInfo}\n          userTokenAccounts={userTokenAccounts}\n          feeCompensationInfo={feeCompensationInfo}\n          feeLimitsInfo={feeLimitsInfo}\n          priceInfo={priceInfo}\n          solanaProvider={solanaProvider}\n          networkFees={networkFees}\n        />\n      ) : undefined}\n\n      {isSecretKeyWallet ? (\n        <Section className=\"password\">\n          <SubTitle>Enter password to confirm</SubTitle>\n          <PasswordInputStyled value={password} onChange={handlePasswordChange} />\n          {hasError ? <ErrorHint error=\"Incorrect password, try again\" noIcon /> : undefined}\n        </Section>\n      ) : undefined}\n    </WrapperModal>\n  );\n};\n"],"sourceRoot":""}