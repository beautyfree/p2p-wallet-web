{"version":3,"sources":["components/common/Modal/Modal.tsx","components/modals/TransactionConfirmModal/TransactionConfirmModal.tsx"],"names":["Wrapper","Header","Title","Description","CloseWrapper","CloseIcon","Content","Footer","Modal","className","title","description","close","onClick","name","children","footer","WrapperModal","Section","SectionTitle","FieldInfo","WalletIcon","IconWrapper","InfoWrapper","InfoTitle","InfoValue","SubTitle","PasswordInputStyled","TransactionConfirmModal","useState","walletType","useSelector","state","validatePassword","a","loadMnemonicAndSeed","setHasError","handleConfirmClick","handleCloseClick","isDisabled","WalletType","password","renderDescription","action","primary","disabled","lightGray","renderButtons","type","symbol","address","size","value","onChange","setPassword","hasError","error","noIcon"],"mappings":"wNAOMA,EAAO,qDAUPC,EAAM,qDAUNC,EAAK,oDASLC,EAAW,yDAOXC,EAAY,2DAiBZC,EAAS,sDAOTC,EAAO,sDAEPC,EAAM,qDAoBCC,EAAkC,SAAC,GAO1C,IAP0C,EAO1C,EAP0C,QAO1C,EAP0C,cAO1C,EAP0C,SAO1C,EAP0C,QAO1C,EAP0C,SAM9CC,EACI,EADJA,UAEA,OACE,qBAASA,UAAT,GACE,yBACGC,EAAQ,yBAAH,QAAN,EACCC,EAAc,yBAAH,QAAZ,EACCC,EACC,qBAAcC,QAAd,GACE,qBAAWC,KAAX,gBAFJ,GAMDC,EAAW,yBAAH,QAAT,EACCC,EAAS,yBAAH,QAAP,I,2PC7FAC,EAAY,wDAIZC,EAAO,sDAgBPC,EAAY,0DAOZC,EAAS,uDASTC,EAAU,sDAOVC,EAAW,0DAWXC,EAAW,0DAQXC,EAAS,wDASTC,EAAS,uDAOTC,EAAQ,wDAWRC,EAAmB,gEAyBZC,EAAoD,SAAC,GAA4B,IAA5B,EAA4B,EAA5B,OAA4B,EAA5B,OAAgBhB,EAAY,EAAZA,MAChF,EAAgCiB,mBAAhC,uBAAM,EAAN,KAAM,EAAN,KACA,EAAgCA,oBAAhC,sBAAM,EAAN,KAAM,EAAN,KACMC,EAAaC,aAAaC,YAAD,OAAWA,SAA1C,QAEMC,EAAgB,uCAAG,uBAAAC,EAAA,+EAEfC,YAAN,GAFqB,OAGrBC,MAHqB,+CAKjB,eAAJ,KACEA,MANmB,wDAAH,sDAmBhBC,EAAqB,WACzBzB,OAGI0B,EAAmB,WACvB1B,OAGI2B,EAAaT,IAAeU,IAAfV,UAAsCW,GAAzD,GAsCA,OACE,qBACE/B,MADF,2BAEEC,YAvCsB,WACxB,UACE,WACE,yBACF,WACE,yBACF,QACE,qBAgCW+B,GACb9B,MAHF,EAIEI,OA9BkB,WACpB,MAEA,UACE,WACE2B,qBACA,MACF,WACA,QACEA,qBAIJ,OACE,oCACE,uBAAQC,SAAR,EAAgBC,SAAhB,EAAsChC,QAAtC,GACE,GAEF,uBAAQiC,WAAR,EAAkBjC,QAAlB,cAYMkC,IACPC,WACC,qBAASvC,UAAT,QACE,yBACE,uBACEwC,OAAQ,cADV,OAEEC,QAAS,sBAFX,WAGEC,KAHF,KAKA,yBACE,6CACA,yBACG,EAAD,OADF,IACuC,cAAD,UAI1C,yBACE,yBACE,qBAAYrC,KAAZ,YAEF,yBACE,2DACA,yBAAY,EAAD,qBArBnB,EA2BCkC,WACC,oCACE,qBAASvC,UAAT,QACE,iCACA,yBACE,uBACEwC,OAAQ,aADV,OAEEC,QAAS,qBAFX,WAGEC,KAHF,KAKA,yBACE,6CACA,yBACG,iCACsB,EADtB,aAAD,WAEc,IACb,aAAD,WAKR,qBAAS1C,UAAT,OACE,+BACA,yBACE,uBACEwC,OAAQ,cADV,OAEEC,QAAS,sBAFX,WAGEC,KAHF,KAKA,yBACE,4CACA,yBACG,kCACsB,EADtB,cAAD,WAEc,IACb,cAAD,UAIN,yBACE,yBACE,qBAAYrC,KAAZ,YAEF,yBACE,+CACA,yBACG,qBACG,6BADH,WAAD,yDA9CZ,EAuDCgB,IAAeU,IAAfV,OACC,yBACE,sDACA,qBAAqBsB,MAArB,EAAsCC,SAjJjB,SAACD,GAC5BE,KAEA,GACOrB,EAAL,MA8IKsB,EAAW,uBAAWC,MAAX,gCAAiDC,QAApD,SAAT,QAJJ,I","file":"static/js/4.33d44a0c.chunk.js","sourcesContent":["import React, { FunctionComponent } from 'react';\n\nimport { styled } from '@linaria/react';\nimport { rgba } from 'polished';\n\nimport { Icon } from 'components/ui';\n\nconst Wrapper = styled.div`\n  position: relative;\n\n  display: flex;\n  flex-direction: column;\n\n  background-color: #fff;\n  border-radius: 15px;\n`;\n\nconst Header = styled.div`\n  position: relative;\n\n  padding: 24px 20px;\n\n  text-align: center;\n\n  border-bottom: 1px solid ${rgba('#000', 0.05)};\n`;\n\nconst Title = styled.div`\n  margin-bottom: 10px;\n\n  color: #000;\n  font-weight: bold;\n  font-size: 20px;\n  line-height: 100%;\n`;\n\nconst Description = styled.div`\n  color: #a3a5ba;\n  font-weight: 600;\n  font-size: 16px;\n  line-height: 100%;\n`;\n\nconst CloseWrapper = styled.div`\n  position: absolute;\n  top: 15px;\n  right: 15px;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 32px;\n  height: 32px;\n\n  background: #f6f6f8;\n  border-radius: 8px;\n\n  cursor: pointer;\n`;\n\nconst CloseIcon = styled(Icon)`\n  width: 16px;\n  height: 16px;\n\n  color: #a3a5ba;\n`;\n\nconst Content = styled.div``;\n\nconst Footer = styled.div`\n  display: flex;\n  align-items: center;\n  padding: 20px;\n\n  border-top: 1px solid ${rgba('#000', 0.05)};\n\n  & > :not(:last-child) {\n    margin-right: 16px;\n  }\n`;\n\ntype Props = {\n  title?: React.ReactNode;\n  description?: React.ReactNode;\n  footer?: React.ReactNode;\n  close?: () => void;\n  className?: string;\n};\n\nexport const Modal: FunctionComponent<Props> = ({\n  title,\n  description,\n  footer,\n  close,\n  children,\n  className,\n}) => {\n  return (\n    <Wrapper className={className}>\n      <Header>\n        {title ? <Title>{title}</Title> : undefined}\n        {description ? <Description>{description}</Description> : undefined}\n        {close ? (\n          <CloseWrapper onClick={close}>\n            <CloseIcon name=\"close\" />\n          </CloseWrapper>\n        ) : undefined}\n      </Header>\n      {children ? <Content>{children}</Content> : undefined}\n      {footer ? <Footer>{footer}</Footer> : undefined}\n    </Wrapper>\n  );\n};\n","import React, { FunctionComponent, useState } from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { styled } from '@linaria/react';\n\nimport { Token } from 'api/token/Token';\nimport { TokenAccount } from 'api/token/TokenAccount';\nimport { WalletType } from 'api/wallet';\nimport { loadMnemonicAndSeed } from 'api/wallet/ManualWallet';\nimport { ERROR_WRONG_PASSWORD } from 'api/wallet/ManualWallet/errors';\nimport { ErrorHint } from 'components/common/ErrorHint';\nimport { Modal } from 'components/common/Modal';\nimport { PasswordInput } from 'components/common/PasswordInput';\nimport { TokenAvatar } from 'components/common/TokenAvatar';\nimport { Button, Icon } from 'components/ui';\n\nconst WrapperModal = styled(Modal)`\n  flex-basis: 588px;\n`;\n\nconst Section = styled.div`\n  padding: 20px;\n\n  &.swap {\n    padding: 20px 20px 0;\n  }\n\n  &.send {\n    padding: 0 20px;\n  }\n\n  &:not(:last-child) {\n    border-bottom: 1px solid rgba(0, 0, 0, 0.05);\n  }\n`;\n\nconst SectionTitle = styled.div`\n  color: #a3a5ba;\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 140%;\n`;\n\nconst FieldInfo = styled.div`\n  display: flex;\n  padding: 20px 0;\n\n  &:not(:last-child) {\n    border-bottom: 1px solid rgba(0, 0, 0, 0.05);\n  }\n`;\n\nconst WalletIcon = styled(Icon)`\n  width: 24px;\n  height: 24px;\n\n  color: #a3a5ba;\n`;\n\nconst IconWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 44px;\n  height: 44px;\n\n  background: #f6f6f8;\n  border-radius: 12px;\n`;\n\nconst InfoWrapper = styled.div`\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  justify-content: center;\n  margin: 0 9px 0 12px;\n`;\n\nconst InfoTitle = styled.div`\n  margin-bottom: 2px;\n\n  color: #a3a5ba;\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 24px;\n`;\n\nconst InfoValue = styled.div`\n  color: #000;\n  font-weight: 600;\n  font-size: 16px;\n  line-height: 16px;\n`;\n\nconst SubTitle = styled.span`\n  display: flex;\n\n  margin-bottom: 12px;\n\n  color: #000;\n  font-weight: 600;\n  font-size: 16px;\n  line-height: 140%;\n`;\n\nconst PasswordInputStyled = styled(PasswordInput)`\n  height: 46px;\n`;\n\ntype TransferParams = {\n  source: TokenAccount;\n  destination: string;\n  amount: number;\n};\n\ntype SwapParams = {\n  firstToken: Token;\n  firstTokenAccount: TokenAccount;\n  secondToken: Token;\n  secondTokenAccount: TokenAccount;\n  firstAmount: number;\n  secondAmount: number;\n};\n\ntype Props = {\n  type: 'send' | 'swap';\n  params: TransferParams | SwapParams;\n  close: (isConfirm?: boolean) => void;\n};\n\nexport const TransactionConfirmModal: FunctionComponent<Props> = ({ type, params, close }) => {\n  const [password, setPassword] = useState('');\n  const [hasError, setHasError] = useState(false);\n  const walletType = useSelector((state) => state.wallet.type);\n\n  const validatePassword = async (value: string) => {\n    try {\n      await loadMnemonicAndSeed(value);\n      setHasError(false);\n    } catch (error) {\n      if ((error as Error).message === ERROR_WRONG_PASSWORD) {\n        setHasError(true);\n      }\n    }\n  };\n\n  const handlePasswordChange = (value: string) => {\n    setPassword(value);\n\n    if (value) {\n      void validatePassword(value);\n    }\n  };\n\n  const handleConfirmClick = () => {\n    close(true);\n  };\n\n  const handleCloseClick = () => {\n    close(false);\n  };\n\n  const isDisabled = walletType === WalletType.MANUAL && (!password || hasError);\n\n  const renderDescription = () => {\n    switch (type) {\n      case 'swap':\n        return 'Swap transaction';\n      case 'send':\n        return 'Send transaction';\n      default:\n        return 'Transaction';\n    }\n  };\n\n  const renderButtons = () => {\n    let action;\n\n    switch (type) {\n      case 'swap':\n        action = 'Confirm and swap';\n        break;\n      case 'send':\n      default:\n        action = 'Confirm and send';\n        break;\n    }\n\n    return (\n      <>\n        <Button primary disabled={isDisabled} onClick={handleConfirmClick}>\n          {action}\n        </Button>\n        <Button lightGray onClick={handleCloseClick}>\n          Cancel\n        </Button>\n      </>\n    );\n  };\n\n  return (\n    <WrapperModal\n      title=\"Double check and confirm\"\n      description={renderDescription()}\n      close={handleCloseClick}\n      footer={renderButtons()}>\n      {type === 'send' ? (\n        <Section className=\"send\">\n          <FieldInfo>\n            <TokenAvatar\n              symbol={(params as TransferParams).source.mint.symbol}\n              address={(params as TransferParams).source.mint.address.toBase58()}\n              size={44}\n            />\n            <InfoWrapper>\n              <InfoTitle>Check the amount</InfoTitle>\n              <InfoValue>\n                {(params as TransferParams).amount} {(params as TransferParams).source.mint.symbol}\n              </InfoValue>\n            </InfoWrapper>\n          </FieldInfo>\n          <FieldInfo>\n            <IconWrapper>\n              <WalletIcon name=\"wallet\" />\n            </IconWrapper>\n            <InfoWrapper>\n              <InfoTitle>Check recepient’s address</InfoTitle>\n              <InfoValue>{(params as TransferParams).destination}</InfoValue>\n            </InfoWrapper>\n          </FieldInfo>\n        </Section>\n      ) : undefined}\n\n      {type === 'swap' ? (\n        <>\n          <Section className=\"swap\">\n            <SectionTitle>From</SectionTitle>\n            <FieldInfo>\n              <TokenAvatar\n                symbol={(params as SwapParams).firstToken.symbol}\n                address={(params as SwapParams).firstToken.address.toBase58()}\n                size={44}\n              />\n              <InfoWrapper>\n                <InfoTitle>Check the amount</InfoTitle>\n                <InfoValue>\n                  {(params as SwapParams).firstToken\n                    .toMajorDenomination((params as SwapParams).firstAmount)\n                    .toNumber()}{' '}\n                  {(params as SwapParams).firstToken.symbol}\n                </InfoValue>\n              </InfoWrapper>\n            </FieldInfo>\n          </Section>\n          <Section className=\"top\">\n            <SectionTitle>To</SectionTitle>\n            <FieldInfo>\n              <TokenAvatar\n                symbol={(params as SwapParams).secondToken.symbol}\n                address={(params as SwapParams).secondToken.address.toBase58()}\n                size={44}\n              />\n              <InfoWrapper>\n                <InfoTitle>Minimum receive</InfoTitle>\n                <InfoValue>\n                  {(params as SwapParams).secondToken\n                    .toMajorDenomination((params as SwapParams).secondAmount)\n                    .toNumber()}{' '}\n                  {(params as SwapParams).secondToken.symbol}\n                </InfoValue>\n              </InfoWrapper>\n            </FieldInfo>\n            <FieldInfo>\n              <IconWrapper>\n                <WalletIcon name=\"wallet\" />\n              </IconWrapper>\n              <InfoWrapper>\n                <InfoTitle>Destination wallet</InfoTitle>\n                <InfoValue>\n                  {(params as SwapParams).secondTokenAccount\n                    ? (params as SwapParams).secondTokenAccount.address.toBase58()\n                    : 'Will be created after transaction processing'}\n                </InfoValue>\n              </InfoWrapper>\n            </FieldInfo>\n          </Section>\n        </>\n      ) : undefined}\n      {walletType === WalletType.MANUAL ? (\n        <Section>\n          <SubTitle>Enter password to confirm</SubTitle>\n          <PasswordInputStyled value={password} onChange={handlePasswordChange} />\n          {hasError ? <ErrorHint error=\"Incorrect password, try again\" noIcon /> : undefined}\n        </Section>\n      ) : undefined}\n    </WrapperModal>\n  );\n};\n"],"sourceRoot":""}