{"version":3,"sources":["components/common/Modal/Modal.tsx","components/modals/TransactionConfirmModal/common/styled.ts","components/modals/TransactionConfirmModal/Send/Send.tsx","components/modals/TransactionConfirmModal/Swap/Swap.tsx","components/modals/TransactionConfirmModal/TransactionConfirmModal.tsx"],"names":["Wrapper","Header","Title","Description","CloseWrapper","CloseIcon","Content","Footer","Modal","className","title","description","close","onClick","name","children","footer","Section","SectionTitle","FieldInfo","WalletIcon","IconWrapper","InfoWrapper","InfoTitle","Username","InfoValue","Send","params","symbol","address","size","medium","Swap","minimumOutputAmount","tokenConfigs","useConfig","formatBigNumber","inputAmount","WrapperModal","SubTitle","PasswordInputStyled","TransactionConfirmModal","useState","walletType","useSelector","state","validatePassword","a","loadMnemonicAndSeed","setHasError","handleConfirmClick","handleCloseClick","isDisabled","WalletType","password","renderDescription","action","primary","disabled","lightGray","renderButtons","type","value","onChange","setPassword","hasError","error","noIcon"],"mappings":"kOAQMA,EAAO,qDAUPC,EAAM,qDAUNC,EAAK,oDASLC,EAAW,yDAOXC,EAAY,2DAiBZC,EAAS,sDAOTC,EAAO,sDAEPC,EAAM,qDAoBCC,EAAkC,SAAC,GAO1C,IAP0C,EAO1C,EAP0C,QAO1C,EAP0C,cAO1C,EAP0C,SAO1C,EAP0C,QAO1C,EAP0C,SAM9CC,EACI,EADJA,UAEA,OACE,qBAASA,UAAT,GACE,yBACGC,EAAQ,yBAAH,QAAN,EACCC,EAAc,yBAAH,QAAZ,EACCC,EACC,qBAAcC,QAAd,GACE,qBAAWC,KAAX,gBAFJ,GAMDC,EAAW,yBAAH,QAAT,EACCC,EAAS,yBAAH,QAAP,I,yQC1GOC,EAAO,qDAgBPC,EAAY,0DAOZC,EAAS,wDASTC,EAAU,uDAOVC,EAAW,yDAWXC,EAAW,yDAQXC,EAAS,uDASTC,EAAQ,kDAKRC,EAAS,uD,6BC/CTC,EAAkB,SAAC,GAAe,IAAbC,EAAa,EAAbA,OAChC,OACE,qBAASlB,UAAT,QACE,yBACE,uBACEmB,OAAQD,cADV,OAEEE,QAASF,sBAFX,WAGEG,KAHF,KAKA,yBACE,6CACA,yBACGH,EAAD,OADF,IACmBA,cAAD,UAItB,yBACE,yBACE,qBAAYb,KAAZ,YAEF,yBACGa,WACC,yBAAWA,EADZA,UAGC,kBAHF,EAGE,uCAEF,yBACE,uBAAaE,QAASF,EAAtB,YAA0CI,QAA1C,S,iBC3BCC,EAAkB,SAAC,GAE1B,QADJL,OAAQ,EACJ,EADI,iBACJ,EADI,kBACJ,EADI,YAAgDM,EACpD,EADoDA,oBAEhDC,EAAiBC,cAAjBD,aAER,OACE,oCACE,qBAASzB,UAAT,QACE,iCACA,yBACE,uBAAamB,OAAb,EAAqCE,KAArC,KACA,yBACE,6CACA,yBACGM,YAAgBC,EAAaH,KAA9B,UADF,IACwE,MAK9E,qBAASzB,UAAT,OACE,+BACA,yBACE,uBAAamB,OAAb,EAAsCE,KAAtC,KACA,yBACE,4CACA,yBACGM,YAAgBH,EAAqBC,KAAtC,UAA8E,IAC9E,QCpCRI,EAAY,wDAIZC,EAAQ,wDAWRC,EAAmB,+DAUZC,EAAoD,SAAC,GAA4B,IAA5B,EAA4B,EAA5B,OAA4B,EAA5B,OAAgB7B,EAAY,EAAZA,MAChF,EAAgC8B,mBAAhC,uBAAM,EAAN,KAAM,EAAN,KACA,EAAgCA,oBAAhC,sBAAM,EAAN,KAAM,EAAN,KACMC,EAAaC,aAAaC,YAAD,OAAWA,SAA1C,QAEMC,EAAgB,uCAAG,uBAAAC,EAAA,+EAEfC,YAAN,GAFqB,OAGrBC,MAHqB,+CAKjB,eAAJ,KACEA,MANmB,wDAAH,sDAmBhBC,EAAqB,WACzBtC,OAGIuC,EAAmB,WACvBvC,OAGIwC,EAAaT,IAAeU,IAAfV,UAAsCW,GAAzD,GAsCA,OACE,qBACE5C,MADF,2BAEEC,YAvCsB,WACxB,UACE,WACE,yBACF,WACE,yBACF,QACE,qBAgCW4C,GACb3C,MAHF,EAIEI,OA9BkB,WACpB,MAEA,GACE,SADF,EAEIwC,0BAIAA,qBAIJ,OACE,oCACE,uBAAQC,SAAR,EAAgBC,SAAhB,EAAsC7C,QAAtC,GACE,GAEF,uBAAQ8C,WAAR,EAAkB9C,QAAlB,cAYM+C,IAEPC,WAAkB,qBAAMlC,OAAxBkC,SAAD,EACCA,WAAkB,qBAAMlC,OAAxBkC,SAAD,EAEClB,IAAeU,IAAfV,OACC,yBACE,sDACA,qBAAqBmB,MAArB,EAAsCC,SAnEjB,SAACD,GAC5BE,KAEA,GACOlB,EAAL,MAgEKmB,EAAW,uBAAWC,MAAX,gCAAiDC,QAApD,SAAT,QAJJ,I","file":"static/js/4.67b3d6b1.chunk.js","sourcesContent":["import type { FunctionComponent } from 'react';\nimport React from 'react';\n\nimport { styled } from '@linaria/react';\nimport { rgba } from 'polished';\n\nimport { Icon } from 'components/ui';\n\nconst Wrapper = styled.div`\n  position: relative;\n\n  display: flex;\n  flex-direction: column;\n\n  background-color: #fff;\n  border-radius: 15px;\n`;\n\nconst Header = styled.div`\n  position: relative;\n\n  padding: 24px 20px;\n\n  text-align: center;\n\n  border-bottom: 1px solid ${rgba('#000', 0.05)};\n`;\n\nconst Title = styled.div`\n  margin-bottom: 10px;\n\n  color: #000;\n  font-weight: bold;\n  font-size: 20px;\n  line-height: 100%;\n`;\n\nconst Description = styled.div`\n  color: #a3a5ba;\n  font-weight: 600;\n  font-size: 16px;\n  line-height: 100%;\n`;\n\nconst CloseWrapper = styled.div`\n  position: absolute;\n  top: 15px;\n  right: 15px;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 32px;\n  height: 32px;\n\n  background: #f6f6f8;\n  border-radius: 8px;\n\n  cursor: pointer;\n`;\n\nconst CloseIcon = styled(Icon)`\n  width: 16px;\n  height: 16px;\n\n  color: #a3a5ba;\n`;\n\nconst Content = styled.div``;\n\nconst Footer = styled.div`\n  display: flex;\n  align-items: center;\n  padding: 20px;\n\n  border-top: 1px solid ${rgba('#000', 0.05)};\n\n  & > :not(:last-child) {\n    margin-right: 16px;\n  }\n`;\n\ntype Props = {\n  title?: React.ReactNode;\n  description?: React.ReactNode;\n  footer?: React.ReactNode;\n  close?: () => void;\n  className?: string;\n};\n\nexport const Modal: FunctionComponent<Props> = ({\n  title,\n  description,\n  footer,\n  close,\n  children,\n  className,\n}) => {\n  return (\n    <Wrapper className={className}>\n      <Header>\n        {title ? <Title>{title}</Title> : undefined}\n        {description ? <Description>{description}</Description> : undefined}\n        {close ? (\n          <CloseWrapper onClick={close}>\n            <CloseIcon name=\"close\" />\n          </CloseWrapper>\n        ) : undefined}\n      </Header>\n      {children ? <Content>{children}</Content> : undefined}\n      {footer ? <Footer>{footer}</Footer> : undefined}\n    </Wrapper>\n  );\n};\n","import { styled } from '@linaria/react';\n\nimport { Icon } from 'components/ui';\n\nexport const Section = styled.div`\n  padding: 20px;\n\n  &.swap {\n    padding: 20px 20px 0;\n  }\n\n  &.send {\n    padding: 0 20px;\n  }\n\n  &:not(:last-child) {\n    border-bottom: 1px solid rgba(0, 0, 0, 0.05);\n  }\n`;\n\nexport const SectionTitle = styled.div`\n  color: #a3a5ba;\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 140%;\n`;\n\nexport const FieldInfo = styled.div`\n  display: flex;\n  padding: 20px 0;\n\n  &:not(:last-child) {\n    border-bottom: 1px solid rgba(0, 0, 0, 0.05);\n  }\n`;\n\nexport const WalletIcon = styled(Icon)`\n  width: 24px;\n  height: 24px;\n\n  color: #a3a5ba;\n`;\n\nexport const IconWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 44px;\n  height: 44px;\n\n  background: #f6f6f8;\n  border-radius: 12px;\n`;\n\nexport const InfoWrapper = styled.div`\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  justify-content: center;\n  margin: 0 9px 0 12px;\n`;\n\nexport const InfoTitle = styled.div`\n  margin-bottom: 2px;\n\n  color: #a3a5ba;\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 24px;\n`;\n\nexport const Username = styled(InfoTitle)`\n  color: #000;\n  font-size: 16px;\n`;\n\nexport const InfoValue = styled.div`\n  color: #000;\n  font-weight: 600;\n  font-size: 16px;\n  line-height: 16px;\n`;\n","import type { FC } from 'react';\nimport React from 'react';\n\nimport type { TokenAccount } from 'api/token/TokenAccount';\nimport { AddressText } from 'components/common/AddressText';\nimport { TokenAvatar } from 'components/common/TokenAvatar';\n\nimport {\n  FieldInfo,\n  IconWrapper,\n  InfoTitle,\n  InfoValue,\n  InfoWrapper,\n  Section,\n  Username,\n  WalletIcon,\n} from '../common/styled';\n\nexport type TransferParams = {\n  source: TokenAccount;\n  destination: string;\n  username?: string;\n  amount: number;\n};\n\ninterface Props {\n  params: TransferParams;\n}\n\nexport const Send: FC<Props> = ({ params }) => {\n  return (\n    <Section className=\"send\">\n      <FieldInfo>\n        <TokenAvatar\n          symbol={params.source.mint.symbol}\n          address={params.source.mint.address.toBase58()}\n          size={44}\n        />\n        <InfoWrapper>\n          <InfoTitle>Check the amount</InfoTitle>\n          <InfoValue>\n            {params.amount} {params.source.mint.symbol}\n          </InfoValue>\n        </InfoWrapper>\n      </FieldInfo>\n      <FieldInfo>\n        <IconWrapper>\n          <WalletIcon name=\"wallet\" />\n        </IconWrapper>\n        <InfoWrapper>\n          {params.username ? (\n            <Username>{params.username}</Username>\n          ) : (\n            <InfoTitle>Check recepientâ€™s address</InfoTitle>\n          )}\n          <InfoValue>\n            <AddressText address={params.destination} medium />\n          </InfoValue>\n        </InfoWrapper>\n      </FieldInfo>\n    </Section>\n  );\n};\n","import type { FC } from 'react';\nimport React from 'react';\n\nimport type { u64 } from '@solana/spl-token';\n\nimport { useConfig } from 'app/contexts/swap';\nimport { formatBigNumber } from 'app/contexts/swap/utils/format';\nimport { TokenAvatar } from 'components/common/TokenAvatar';\n\nimport {\n  FieldInfo,\n  InfoTitle,\n  InfoValue,\n  InfoWrapper,\n  Section,\n  SectionTitle,\n} from '../common/styled';\n\nexport type SwapParams = {\n  inputTokenName: string;\n  outputTokenName: string;\n  inputAmount: u64;\n  minimumOutputAmount: u64;\n};\n\ninterface Props {\n  params: SwapParams;\n}\n\nexport const Swap: FC<Props> = ({\n  params: { inputTokenName, outputTokenName, inputAmount, minimumOutputAmount },\n}) => {\n  const { tokenConfigs } = useConfig();\n\n  return (\n    <>\n      <Section className=\"swap\">\n        <SectionTitle>From</SectionTitle>\n        <FieldInfo>\n          <TokenAvatar symbol={inputTokenName} size={44} />\n          <InfoWrapper>\n            <InfoTitle>Check the amount</InfoTitle>\n            <InfoValue>\n              {formatBigNumber(inputAmount, tokenConfigs[inputTokenName].decimals)} {inputTokenName}\n            </InfoValue>\n          </InfoWrapper>\n        </FieldInfo>\n      </Section>\n      <Section className=\"top\">\n        <SectionTitle>To</SectionTitle>\n        <FieldInfo>\n          <TokenAvatar symbol={outputTokenName} size={44} />\n          <InfoWrapper>\n            <InfoTitle>Minimum receive</InfoTitle>\n            <InfoValue>\n              {formatBigNumber(minimumOutputAmount, tokenConfigs[outputTokenName].decimals)}{' '}\n              {outputTokenName}\n            </InfoValue>\n          </InfoWrapper>\n        </FieldInfo>\n        {/*<FieldInfo>*/}\n        {/*  <IconWrapper>*/}\n        {/*    <WalletIcon name=\"wallet\" />*/}\n        {/*  </IconWrapper>*/}\n        {/*  <InfoWrapper>*/}\n        {/*    <InfoTitle>Destination wallet</InfoTitle>*/}\n        {/*    <InfoValue>*/}\n        {/*      {(params as SwapParams).secondTokenAccount*/}\n        {/*        ? (params as SwapParams).secondTokenAccount.address.toBase58()*/}\n        {/*        : 'Will be created after transaction processing'}*/}\n        {/*    </InfoValue>*/}\n        {/*  </InfoWrapper>*/}\n        {/*</FieldInfo>*/}\n      </Section>\n    </>\n  );\n};\n","import type { FunctionComponent } from 'react';\nimport React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { styled } from '@linaria/react';\n\nimport { WalletType } from 'api/wallet';\nimport { loadMnemonicAndSeed } from 'api/wallet/ManualWallet';\nimport { ERROR_WRONG_PASSWORD } from 'api/wallet/ManualWallet/errors';\nimport { ErrorHint } from 'components/common/ErrorHint';\nimport { Modal } from 'components/common/Modal';\nimport { PasswordInput } from 'components/common/PasswordInput';\nimport { Button } from 'components/ui';\n\nimport { Section } from './common/styled';\nimport type { TransferParams } from './Send';\nimport { Send } from './Send';\nimport type { SwapParams } from './Swap';\nimport { Swap } from './Swap';\n\nconst WrapperModal = styled(Modal)`\n  flex-basis: 588px;\n`;\n\nconst SubTitle = styled.span`\n  display: flex;\n\n  margin-bottom: 12px;\n\n  color: #000;\n  font-weight: 600;\n  font-size: 16px;\n  line-height: 140%;\n`;\n\nconst PasswordInputStyled = styled(PasswordInput)`\n  height: 46px;\n`;\n\ntype Props = {\n  type: 'send' | 'swap';\n  params: TransferParams | SwapParams;\n  close: (isConfirm?: boolean) => void;\n};\n\nexport const TransactionConfirmModal: FunctionComponent<Props> = ({ type, params, close }) => {\n  const [password, setPassword] = useState('');\n  const [hasError, setHasError] = useState(false);\n  const walletType = useSelector((state) => state.wallet.type);\n\n  const validatePassword = async (value: string) => {\n    try {\n      await loadMnemonicAndSeed(value);\n      setHasError(false);\n    } catch (error) {\n      if ((error as Error).message === ERROR_WRONG_PASSWORD) {\n        setHasError(true);\n      }\n    }\n  };\n\n  const handlePasswordChange = (value: string) => {\n    setPassword(value);\n\n    if (value) {\n      void validatePassword(value);\n    }\n  };\n\n  const handleConfirmClick = () => {\n    close(true);\n  };\n\n  const handleCloseClick = () => {\n    close(false);\n  };\n\n  const isDisabled = walletType === WalletType.MANUAL && (!password || hasError);\n\n  const renderDescription = () => {\n    switch (type) {\n      case 'swap':\n        return 'Swap transaction';\n      case 'send':\n        return 'Send transaction';\n      default:\n        return 'Transaction';\n    }\n  };\n\n  const renderButtons = () => {\n    let action;\n\n    switch (type) {\n      case 'swap':\n        action = 'Confirm and swap';\n        break;\n      case 'send':\n      default:\n        action = 'Confirm and send';\n        break;\n    }\n\n    return (\n      <>\n        <Button primary disabled={isDisabled} onClick={handleConfirmClick}>\n          {action}\n        </Button>\n        <Button lightGray onClick={handleCloseClick}>\n          Cancel\n        </Button>\n      </>\n    );\n  };\n\n  return (\n    <WrapperModal\n      title=\"Double check and confirm\"\n      description={renderDescription()}\n      close={handleCloseClick}\n      footer={renderButtons()}\n    >\n      {type === 'send' ? <Send params={params as TransferParams} /> : undefined}\n      {type === 'swap' ? <Swap params={params as SwapParams} /> : undefined}\n\n      {walletType === WalletType.MANUAL ? (\n        <Section>\n          <SubTitle>Enter password to confirm</SubTitle>\n          <PasswordInputStyled value={password} onChange={handlePasswordChange} />\n          {hasError ? <ErrorHint error=\"Incorrect password, try again\" noIcon /> : undefined}\n        </Section>\n      ) : undefined}\n    </WrapperModal>\n  );\n};\n"],"sourceRoot":""}