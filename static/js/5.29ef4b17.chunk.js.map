{"version":3,"sources":["components/ui/Modal/Modal.tsx","components/modals/ReceiveBitcoinModal/common/styled.ts","components/modals/ReceiveBitcoinModal/Create/Create.tsx","components/modals/ReceiveBitcoinModal/TopUp/TopUp.tsx","components/modals/ReceiveBitcoinModal/ReceiveBitcoinModal.tsx"],"names":["easing","BezierEasing","AnimatedDialogContent","animated","StyledDialogContent","props","mobile","Header","Delimiter","IconWrapper","IconStyled","Title","Description","CloseIcon","Content","Footer","Modal","className","useState","isMobile","useIsMobile","useEffect","setIsOpen","config","useMemo","duration","t","from","transform","enter","leave","fadeTransition","useTransition","isOpen","useSpring","y","mass","tension","friction","bind","useDrag","state","set","close","item","style","n","title","description","name","onClick","classNames","hasIcon","Boolean","iconName","children","footer","WrapperModal","Section","List","Row","Create","solanaProvider","useSolana","network","useRenNetwork","tokenAccounts","useUserTokenAccounts","handleCreateAccountClick","a","setCreating","Bitcoin","ToastManager","console","iconBgClassName","primary","onTokenAccountChange","nextTokenAccount","isShortList","TopUp","history","useHistory","ReceiveBitcoinModal","length"],"mappings":"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","file":"static/js/5.29ef4b17.chunk.js","sourcesContent":["import type { FunctionComponent } from 'react';\nimport { useEffect, useMemo, useState } from 'react';\nimport * as React from 'react';\nimport { animated, useSpring, useTransition } from 'react-spring';\n\nimport { styled } from '@linaria/react';\nimport { theme, up, useIsMobile } from '@p2p-wallet-web/ui';\nimport { DialogContent } from '@reach/dialog';\nimport { useDrag } from '@use-gesture/react';\nimport BezierEasing from 'bezier-easing';\nimport classNames from 'classnames';\n\nimport { MOBILE_FOOTER_TABS_HEIGHT } from 'components/common/Layout';\nimport { Icon } from 'components/ui';\n\nconst easing = BezierEasing(0.7, -0.4, 0.4, 1.4);\n\nconst AnimatedDialogContent = animated(DialogContent);\n\nconst StyledDialogContent = styled(({ ...props }) => <AnimatedDialogContent {...props} />)`\n  overflow-y: ${({ mobile }) => (mobile ? 'scroll' : 'hidden')};\n\n  &[data-reach-dialog-content] {\n    position: fixed;\n    right: 0;\n    bottom: ${MOBILE_FOOTER_TABS_HEIGHT}px;\n\n    display: flex;\n    flex-direction: column;\n    align-self: flex-end;\n    width: 100vw;\n    height: 80vh;\n    margin: 0;\n    padding: 0;\n    overflow-x: hidden;\n    overflow-y: scroll;\n\n    background: ${theme.colors.bg.primary};\n    border-radius: 18px 18px 0 0;\n\n    touch-action: none;\n\n    ${up.tablet} {\n      position: relative;\n      right: unset;\n      bottom: unset;\n\n      align-self: center;\n      width: unset;\n      height: unset;\n      margin: 0;\n      overflow-y: hidden;\n\n      border-radius: 12px;\n    }\n  }\n`;\n\nconst Header = styled.div`\n  position: relative;\n\n  display: inline-flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n\n  min-height: 74px;\n`;\n\nconst Delimiter = styled.div`\n  position: relative;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  &.hasIcon {\n    height: 44px;\n\n    ${up.tablet} {\n      height: 56px;\n    }\n  }\n\n  &::before {\n    position: absolute;\n\n    width: 100%;\n    height: 1px;\n\n    background: ${theme.colors.stroke.secondary};\n\n    content: '';\n  }\n`;\n\nconst IconWrapper = styled.div`\n  z-index: 1;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  width: 44px;\n  height: 44px;\n\n  border-radius: 12px;\n\n  ${up.tablet} {\n    width: 56px;\n    height: 56px;\n  }\n\n  &.warning {\n    background: ${theme.colors.system.warningMain};\n  }\n`;\n\nconst IconStyled = styled(Icon)`\n  width: 24px;\n  height: 24px;\n\n  color: ${theme.colors.textIcon.buttonPrimary};\n\n  ${up.tablet} {\n    width: 32px;\n    height: 32px;\n  }\n`;\n\nconst Title = styled.div`\n  color: ${theme.colors.textIcon.primary};\n  font-weight: 500;\n  font-size: 20px;\n  line-height: 140%;\n  letter-spacing: 0.01em;\n`;\n\nconst Description = styled.div`\n  color: ${theme.colors.textIcon.secondary};\n  font-weight: 500;\n  font-size: 14px;\n  line-height: 120%;\n  letter-spacing: 0.01em;\n`;\n\nconst CloseIcon = styled(Icon)`\n  position: absolute;\n  top: 25px;\n  right: 20px;\n\n  width: 24px;\n  height: 24px;\n\n  color: ${theme.colors.textIcon.active};\n\n  cursor: pointer;\n`;\n\nconst Content = styled.div`\n  padding: 0 16px;\n\n  ${up.tablet} {\n    padding: 0 20px;\n  }\n`;\n\nconst Footer = styled.div`\n  display: grid;\n  grid-auto-flow: row;\n  grid-gap: 16px;\n  margin-bottom: 16px;\n  padding: 0 16px;\n\n  ${up.tablet} {\n    grid-auto-flow: column;\n    padding: 20px;\n  }\n`;\n\ntype Props = {\n  title?: React.ReactNode;\n  description?: React.ReactNode;\n  footer?: React.ReactNode;\n  iconName?: string;\n  iconBgClassName?: string;\n  close: () => void;\n  className?: string;\n};\n\nexport const Modal: FunctionComponent<Props> = ({\n  title,\n  description,\n  footer,\n  iconName,\n  iconBgClassName,\n\n  close,\n  children,\n  className,\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const isMobile = useIsMobile();\n\n  useEffect(() => {\n    setIsOpen(true);\n\n    return () => {\n      setIsOpen(false);\n    };\n  }, []);\n\n  const config = useMemo(() => {\n    if (isMobile) {\n      return {\n        config: { duration: 600, easing: (t: number) => easing(t) },\n        from: { transform: 'translateY(100px)' },\n        enter: { transform: 'translateX(0)' },\n        leave: { transform: 'translateY(100px)' },\n      };\n    }\n\n    return {\n      // config: { duration: 600, easing: (t: number) => easing(t) },\n      // from: { transform: 'translateX(422px)' },\n      // enter: { transform: 'translateX(0)' },\n      // leave: { transform: 'translateX(422px)' },\n    };\n  }, [isMobile]);\n\n  const fadeTransition = useTransition(isOpen, null, config);\n\n  const [{ y }, set] = useSpring(() => ({ y: 0, config: { mass: 1, tension: 210, friction: 20 } }));\n  const bind = useDrag((state) => {\n    set({\n      y: state.down ? state.movement[1] : 0,\n    });\n    if (state.movement[1] > 300 || (state.velocity[1] > 3 && state.direction[1] > 0)) {\n      close();\n    }\n  });\n\n  return (\n    <>\n      {fadeTransition.map(\n        ({ item, key, props }) =>\n          item && (\n            <StyledDialogContent\n              key={key}\n              {...(isMobile\n                ? {\n                    ...bind(),\n                    style: {\n                      ...props,\n                      transform: y.interpolate((n) => `translateY(${(n as number) > 0 ? n : 0}px)`),\n                    },\n                  }\n                : {\n                    style: props,\n                  })}\n              aria-label=\"dialog\"\n              className={className}\n            >\n              <Header>\n                {title ? <Title>{title}</Title> : undefined}\n                {description ? <Description>{description}</Description> : undefined}\n                {!isMobile ? <CloseIcon name=\"cross\" onClick={close} /> : undefined}\n              </Header>\n              <Delimiter className={classNames({ hasIcon: Boolean(iconName) })}>\n                {iconName ? (\n                  <IconWrapper className={iconBgClassName}>\n                    <IconStyled name={iconName} />\n                  </IconWrapper>\n                ) : undefined}\n              </Delimiter>\n              {children ? <Content>{children}</Content> : undefined}\n              {footer ? <Footer>{footer}</Footer> : undefined}\n            </StyledDialogContent>\n          ),\n      )}\n    </>\n  );\n};\n","import { styled } from '@linaria/react';\n\nimport { Modal } from 'components/ui/Modal';\n\nexport const WrapperModal = styled(Modal)`\n  flex-basis: 524px;\n`;\n\nexport const Section = styled.div`\n  display: grid;\n  grid-gap: 24px;\n  padding: 16px 0 24px;\n`;\n\nexport const List = styled.ul`\n  display: grid;\n  grid-gap: 16px;\n  margin: 0;\n  padding-left: 32px;\n`;\n\nexport const Row = styled.li``;\n","import type { FC } from 'react';\nimport { useState } from 'react';\n\nimport type { TokenAccount } from '@p2p-wallet-web/core';\nimport { useSolana, useUserTokenAccounts } from '@p2p-wallet-web/core';\nimport { Bitcoin } from '@renproject/chains-bitcoin';\nimport { Solana } from '@renproject/chains-solana';\nimport type { Token } from '@saberhq/token-utils';\nimport { Feature } from 'flagged';\n\nimport type { ModalPropsType } from 'app/contexts';\nimport { FeePaySelector } from 'components/common/FeePaySelector';\nimport { ToastManager } from 'components/common/ToastManager';\nimport { Button, ButtonCancel } from 'components/ui';\nimport { FEATURE_PAY_BY } from 'config/featureFlags';\nimport { useRenNetwork } from 'utils/hooks/renBridge/useNetwork';\n\nimport { List, Row, Section, WrapperModal } from '../common/styled';\n\ntype Props = ModalPropsType;\n\nexport const Create: FC<Props> = ({ close }) => {\n  const solanaProvider = useSolana();\n  const network = useRenNetwork();\n  const tokenAccounts = useUserTokenAccounts();\n\n  // TODO: use for progress bar in Modal. Add this feature to modal\n  const [creating, setCreating] = useState(false);\n\n  const handleFeeTokenAccountChange = (\n    _nextToken: Token,\n    nextTokenAccount: TokenAccount | null,\n  ) => {\n    if (!nextTokenAccount?.key) {\n      return;\n    }\n  };\n\n  const handleCreateAccountClick = async () => {\n    try {\n      setCreating(true);\n      await new Solana(solanaProvider, network).createAssociatedTokenAccount(Bitcoin.asset);\n      close(true);\n    } catch (error) {\n      ToastManager.error((error as Error).message);\n      console.error(error);\n    } finally {\n      setCreating(false);\n    }\n  };\n\n  return (\n    <WrapperModal\n      title=\"Receiving via Bitcoin network\"\n      description=\"Make sure you understand the aspects\"\n      iconName=\"clock\"\n      iconBgClassName=\"warning\"\n      close={() => close(false)}\n      footer={\n        <>\n          <Button primary onClick={handleCreateAccountClick}>\n            Pay 0.002928 SOL & Continue\n          </Button>\n          <ButtonCancel onClick={() => close(false)} />\n        </>\n      }\n    >\n      <Section>\n        <List>\n          <Row>\n            Your wallet list does not contain a renBTC account, and to create one{' '}\n            <strong>you need to make a transaction</strong>. You can choose which currency to pay in\n            below.\n          </Row>\n        </List>\n\n        <Feature name={FEATURE_PAY_BY}>\n          <FeePaySelector\n            tokenAccounts={tokenAccounts}\n            onTokenAccountChange={handleFeeTokenAccountChange}\n            isShortList\n          />\n        </Feature>\n\n        <List>\n          <Row>\n            This address accepts <strong>only Bitcoin</strong>. You may lose assets by sending\n            another coin.\n          </Row>\n          <Row>\n            You will receive <strong>renBTC</strong>.\n          </Row>\n          <Row>\n            Bitcoin deposit address is only open for 36 hours, but you can send to it multiple times\n            within this session\n          </Row>\n        </List>\n      </Section>\n    </WrapperModal>\n  );\n};\n","import type { FC } from 'react';\nimport { useHistory } from 'react-router';\n\nimport type { ModalPropsType } from 'app/contexts';\nimport { Button, ButtonCancel } from 'components/ui';\n\nimport { List, Row, Section, WrapperModal } from '../common/styled';\n\ntype Props = ModalPropsType;\n\nexport const TopUp: FC<Props> = ({ close }) => {\n  const history = useHistory();\n\n  const handleTopUpClick = () => {\n    close(false);\n    history.push('/buy');\n  };\n\n  return (\n    <WrapperModal\n      title=\"Receiving via Bitcoin network\"\n      description=\"Make sure you understand the aspects\"\n      iconName=\"clock\"\n      iconBgClassName=\"warning\"\n      close={() => close(false)}\n      footer={\n        <>\n          <Button primary onClick={handleTopUpClick}>\n            Top up your account\n          </Button>\n          <ButtonCancel onClick={() => close(false)} />\n        </>\n      }\n    >\n      <Section>\n        <List>\n          <Row>\n            A <strong>renBTC account is required</strong> to receive bitcoins over the Bitcoin\n            network.\n          </Row>\n          <Row>\n            Your wallet list does not contain a renBTC account, and to create one{' '}\n            <strong>you need to make a transaction</strong>.\n          </Row>\n          <Row>\n            You <strong>don't have funds</strong> to pay for account creation, but if someone sends\n            renBTC to your address, it will be created for you.\n          </Row>\n        </List>\n      </Section>\n    </WrapperModal>\n  );\n};\n","import type { FC } from 'react';\n\nimport { useUserTokenAccounts } from '@p2p-wallet-web/core';\n\nimport type { ModalPropsType } from 'app/contexts';\n\nimport { Create } from './Create';\nimport { TopUp } from './TopUp';\n\nexport const ReceiveBitcoinModal: FC<ModalPropsType> = ({ close }) => {\n  const tokenAccounts = useUserTokenAccounts();\n\n  if (tokenAccounts.length) {\n    return <Create close={close} />;\n  }\n\n  return <TopUp close={close} />;\n};\n"],"sourceRoot":""}