{"version":3,"sources":["components/modals/TransactionInfoModals/common/styled.ts","components/modals/TransactionConfirmModal/common/styled.ts","components/common/TransactionDetails/TransactionDetails.tsx","components/modals/TransactionConfirmModal/Send/Send.tsx","components/modals/TransactionInfoModals/TransactionStatusModal/TransactionStatusModal.tsx"],"names":["Wrapper","Header","Title","Desc","CloseWrapper","CloseIcon","CheckmarkIcon","OtherIcon","ProgressWrapper","StatusColors","ProgressLine","ProgressStub","BlockWrapper","TransactionStatus","TransactionBadge","TransactionLabel","Content","SendWrapper","ValueCurrency","ValueOriginal","SwapWrapper","SwapColumn","SwapInfo","SwapBlock","SwapIcon","SwapAmount","FieldsWrapper","FieldWrapper","FieldTitle","FieldValue","ShareIcon","ShareWrapper","Footer","ButtonExplorer","Section","DateHeader","Time","GoToExplorerIcon","GoToExplorerLink","FieldInfo","WalletIcon","IconWrapper","InfoWrapper","InfoTitle","Username","To","InfoValue","Subtitle","FromToWrapper","Overlay","TokenAndUsd","TransactionDetails","amount","useFreeTransactions","useSettings","settings","title","titleBottomName","titleBottomValue","sendState","open","noContentPadding","className","prefix","tokenName","userFreeFeeLimits","networkFees","ArrowWrapper","ArrowIconWrapper","ArrowIcon","Send","btcAddress","address","params","symbol","size","value","name","medium","DEFAULT_TRANSACTION_ERROR","TransactionStatusModal","close","provider","useWallet","network","useConnectionContext","useState","transaction","useTransaction","useEffect","newProgress","timerId","setInterval","setProgress","progress","clearTimeout","executeAction","a","setIsExecuting","action","resultSignature","setSignature","transferNotification","header","text","Error","type","ToastManager","mount","commitment","trx","setTransactionError","transactionError","setTimeout","isProcessing","signature","isSuccess","Boolean","isError","today","utcDiff","shortAddress","onClick","trackEvent","transactionConfirmed","isExecuting","dayjs","style","width","classNames","executing","renderStatus","href","getExplorerUrl","target","rel","isDisabled"],"mappings":"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","file":"static/js/5.b5d0a9db.chunk.js","sourcesContent":["import { styled } from '@linaria/react';\nimport { theme, zIndexes } from '@p2p-wallet-web/ui';\n\nimport { Button, Icon } from 'components/ui';\n\nimport { INITIAL_PROGRESS } from '../TransactionStatusModal/TransactionStatusModal';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: stretch;\n  width: 524px;\n  overflow: scroll;\n\n  background: ${theme.colors.bg.primary};\n\n  border-radius: 15px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.06);\n\n  &::-webkit-scrollbar {\n    display: none;\n  }\n`;\n\nexport const Header = styled.div`\n  position: relative;\n\n  color: ${theme.colors.textIcon.primary};\n  font-weight: 500;\n  font-size: 24px;\n  font-style: normal;\n  line-height: 140%;\n  text-align: center;\n`;\n\nexport const Title = styled.div`\n  margin-bottom: 10px;\n\n  color: #000;\n  font-weight: bold;\n  font-size: 20px;\n  line-height: 100%;\n  text-transform: capitalize;\n`;\n\nexport const Desc = styled.div`\n  color: ${theme.colors.bg.buttonDisabled};\n  font-weight: 600;\n  font-size: 16px;\n  line-height: 100%;\n`;\n\nexport const CloseWrapper = styled.div`\n  position: absolute;\n  top: 0;\n  right: 0;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 32px;\n  height: 32px;\n\n  color: ${theme.colors.bg.buttonPrimary};\n\n  border-radius: 8px;\n\n  cursor: pointer;\n`;\n\nexport const CloseIcon = styled(Icon)`\n  width: 16px;\n  height: 16px;\n`;\n\nexport const CheckmarkIcon = styled(Icon)`\n  width: 24px;\n  height: 24px;\n\n  color: ${theme.colors.textIcon.buttonPrimary};\n`;\n\nexport const OtherIcon = styled(Icon)`\n  width: 24px;\n  height: 24px;\n\n  color: ${theme.colors.textIcon.buttonPrimary};\n`;\n\nexport const ProgressWrapper = styled.div`\n  position: relative;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  height: 55px;\n`;\n\nconst StatusColors = styled.div`\n  &.isProcessing {\n    background: ${theme.colors.system.warningMain};\n  }\n\n  &.isSuccess {\n    background: ${theme.colors.system.successMain};\n  }\n\n  &.isError {\n    background: ${theme.colors.system.errorMain};\n  }\n`;\n\nexport const ProgressLine = styled.div`\n  position: absolute;\n\n  left: 0;\n\n  z-index: ${zIndexes.middle};\n\n  width: ${INITIAL_PROGRESS}%;\n  height: 2px;\n\n  background: ${theme.colors.bg.buttonPrimary};\n\n  transition: width 0.15s;\n\n  &.isSuccess {\n    background: ${theme.colors.system.successMain};\n  }\n\n  &.isError {\n    background: ${theme.colors.system.errorMain};\n  }\n`;\n\nexport const ProgressStub = styled.div`\n  position: absolute;\n\n  left: 0;\n\n  z-index: ${zIndexes.bottom};\n\n  width: 100%;\n  height: 1px;\n\n  background: ${theme.colors.stroke.secondary};\n`;\n\nexport const BlockWrapper = styled(StatusColors)`\n  z-index: ${zIndexes.top};\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 55px;\n  height: 55px;\n\n  border-radius: 40%;\n`;\n\nexport const TransactionStatus = styled.div`\n  display: flex;\n  align-items: center;\n\n  margin-left: 20px;\n\n  color: ${theme.colors.textIcon.primary};\n\n  font-weight: 500;\n  font-size: 16px;\n  line-height: 140%;\n`;\n\nexport const TransactionBadge = styled.div`\n  display: flex;\n  align-items: center;\n\n  margin-left: 4px;\n  padding: 5px 12px;\n\n  color: ${theme.colors.textIcon.secondary};\n\n  font-weight: 500;\n  font-size: 12px;\n\n  background: ${theme.colors.bg.secondary};\n  border-radius: 4px;\n`;\n\nexport const TransactionLabel = styled(StatusColors)`\n  display: block;\n  width: 8px;\n  height: 8px;\n\n  margin-right: 8px;\n`;\n\nexport const Content = styled.div`\n  padding-top: 40px;\n`;\n\nexport const SendWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-bottom: 20px;\n`;\n\nexport const ValueCurrency = styled.div`\n  color: #000;\n  font-weight: 600;\n  font-size: 28px;\n  line-height: 120%;\n`;\n\nexport const ValueOriginal = styled.div`\n  margin-top: 4px;\n\n  color: ${theme.colors.bg.buttonDisabled};\n  font-weight: 600;\n  font-size: 16px;\n  line-height: 120%;\n`;\n\nexport const SwapWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n\n  margin-bottom: 40px;\n`;\n\nexport const SwapColumn = styled.div`\n  display: flex;\n  flex: 1;\n  align-items: center;\n\n  &:not(:first-child) {\n    justify-content: flex-start;\n  }\n\n  &:not(:last-child) {\n    justify-content: flex-end;\n  }\n`;\n\nexport const SwapInfo = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nexport const SwapBlock = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  width: 32px;\n  height: 32px;\n  margin: 6px 26px 0;\n\n  background: ${theme.colors.bg.buttonSecondary};\n  border-radius: 12px;\n`;\n\nexport const SwapIcon = styled(Icon)`\n  width: 24px;\n  height: 24px;\n\n  color: ${theme.colors.bg.buttonDisabled};\n`;\n\nexport const SwapAmount = styled.div`\n  margin-top: 10px;\n\n  color: #000;\n  font-weight: 600;\n  font-size: 18px;\n  line-height: 120%;\n`;\n\nexport const FieldsWrapper = styled.div``;\n\nexport const FieldWrapper = styled.div`\n  padding: 16px 30px;\n\n  &:first-child {\n    border-top: 1px solid rgba(0, 0, 0, 0.05);\n  }\n\n  &:not(:last-child) {\n    border-bottom: 1px solid rgba(0, 0, 0, 0.05);\n  }\n`;\n\nexport const FieldTitle = styled.div`\n  color: ${theme.colors.bg.buttonDisabled};\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 21px;\n`;\n\nexport const FieldValue = styled.div`\n  display: flex;\n  align-items: center;\n  margin-top: 3px;\n\n  font-weight: 600;\n  font-size: 16px;\n  line-height: 21px;\n`;\n\nexport const ShareIcon = styled(Icon)`\n  width: 24px;\n  height: 24px;\n\n  color: ${theme.colors.bg.buttonDisabled};\n`;\n\nexport const ShareWrapper = styled.div`\n  display: flex;\n  flex-shrink: 0;\n  align-items: center;\n  justify-content: center;\n  width: 36px;\n  height: 36px;\n  margin-left: 20px;\n\n  background: rgba(163, 165, 186, 0.1);\n  border-radius: 8px;\n  cursor: pointer;\n\n  &:hover {\n    background: ${theme.colors.bg.activePrimary};\n\n    ${ShareIcon} {\n      color: ${theme.colors.textIcon.active};\n    }\n  }\n`;\n\nexport const Footer = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 24px 20px;\n\n  border-top: 1px solid rgba(0, 0, 0, 0.05);\n\n  & > :not(:last-child) {\n    margin-right: 16px;\n  }\n\n  &.isCentered {\n    justify-content: center;\n  }\n`;\n\nexport const ButtonExplorer = styled(Button)`\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 150%;\n`;\n\nexport const Section = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 12px 20px;\n`;\n\nexport const DateHeader = styled.div`\n  display: flex;\n  justify-content: center;\n\n  color: ${theme.colors.textIcon.secondary};\n\n  font-weight: 500;\n  font-size: 14px;\n  line-height: 120%;\n\n  & > *:not(:first-child) {\n    margin-left: 4px;\n  }\n`;\n\nexport const Time = styled.div`\n  color: ${theme.colors.textIcon.primary};\n`;\n\nexport const GoToExplorerIcon = styled(Icon)`\n  width: 24px;\n  height: 24px;\n  margin-right: 8px;\n`;\n\nexport const GoToExplorerLink = styled.a`\n  display: inline-flex;\n  align-items: center;\n\n  font-weight: 500;\n  font-size: 16px;\n  line-height: 140%;\n\n  text-decoration: none;\n\n  &.isDisabled {\n    pointer-events: none;\n  }\n`;\n","import { styled } from '@linaria/react';\nimport { theme } from '@p2p-wallet-web/ui';\n\nimport type { IconProps } from 'components/ui';\nimport { Icon } from 'components/ui';\n\nexport const Section = styled.div`\n  display: grid;\n  padding: 20px 0;\n\n  &.swap {\n    padding: 20px 0 0;\n  }\n\n  &.send {\n    grid-gap: 16px;\n    padding: 16px 0;\n  }\n\n  &.password {\n    padding: 8px 0 24px;\n  }\n`;\n\nexport const SectionTitle = styled.div`\n  color: ${theme.colors.bg.buttonDisabled};\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 140%;\n`;\n\nexport const FieldInfo = styled.div`\n  display: flex;\n  align-items: center;\n  padding: 12px 20px;\n\n  border: 1px solid ${theme.colors.stroke.secondary};\n  border-radius: 12px;\n`;\n\nexport const WalletIcon = styled<IconProps>(Icon)`\n  width: 24px;\n  height: 24px;\n\n  color: ${theme.colors.textIcon.secondary};\n`;\n\nexport const IconWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 44px;\n  height: 44px;\n\n  background: ${theme.colors.bg.secondary};\n  border-radius: 12px;\n`;\n\nexport const InfoWrapper = styled.div`\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  justify-content: center;\n  margin: 0 9px 0 12px;\n`;\n\nexport const InfoTitle = styled.div`\n  color: ${theme.colors.textIcon.primary};\n  font-weight: 500;\n  font-size: 16px;\n  line-height: 140%;\n\n  &.secondary {\n    color: ${theme.colors.textIcon.secondary};\n    font-size: 14px;\n    line-height: 120%;\n  }\n`;\n\nexport const Username = styled(InfoTitle)`\n  color: #000;\n  font-weight: 500;\n  font-size: 14px;\n`;\n\nexport const To = styled.span`\n  margin-right: 4px;\n\n  color: ${theme.colors.textIcon.secondary};\n`;\n\nexport const InfoValue = styled.div`\n  margin-top: 4px;\n\n  color: ${theme.colors.textIcon.secondary};\n  font-weight: 500;\n  font-size: 14px;\n  line-height: 120%;\n  letter-spacing: 0.01em;\n`;\n\nexport const Subtitle = styled.div`\n  margin-top: 16px;\n  margin-left: 20px;\n\n  font-weight: 500;\n  font-size: 16px;\n  line-height: 140%;\n`;\n\nexport const Wrapper = styled.div`\n  position: relative;\n\n  margin-bottom: 8px;\n`;\n\nexport const FromToWrapper = styled.div`\n  position: absolute;\n  top: 107px;\n  left: 27px;\n\n  width: 32px;\n  height: 32px;\n\n  color: ${theme.colors.textIcon.active};\n\n  background: ${theme.colors.bg.primary};\n\n  border: 1px solid ${theme.colors.stroke.secondary};\n  border-radius: 40%;\n\n  svg {\n    width: 20px;\n    height: 20px;\n  }\n`;\n\nexport const Overlay = styled.div`\n  position: absolute;\n  top: 5px;\n  left: -2px;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 34px;\n  height: 19px;\n\n  background: ${theme.colors.bg.primary};\n`;\n","import type { FC } from 'react';\n\nimport { styled } from '@linaria/react';\nimport type { u64 } from '@saberhq/token-utils';\n\nimport type { NetworkFees, UseSendState } from 'app/contexts';\nimport { useSettings } from 'app/contexts';\nimport type { INITIAL_USER_FREE_FEE_LIMITS } from 'app/contexts/api/feeRelayer/utils';\nimport { FeeTransactionTooltip } from 'components/common/TransactionDetails/FeeTransactinTooltip';\nimport { AmountUSDStyled } from 'components/pages/swap/SwapWidget/AmountUSD';\nimport { Accordion } from 'components/ui';\nimport { AccordionTitle } from 'components/ui/AccordionDetails/AccordionTitle';\nimport { ListWrapper, Row, Text } from 'components/ui/AccordionDetails/common';\n\nexport interface TransactionDetailsProps {\n  sendState: UseSendState;\n  userFreeFeeLimits: typeof INITIAL_USER_FREE_FEE_LIMITS;\n  networkFees: NetworkFees;\n  btcAddress?: string;\n  isOpen?: boolean;\n  amount?: u64;\n}\n\nconst TokenAndUsd = styled.div`\n  display: flex;\n`;\n\nexport const TransactionDetails: FC<TransactionDetailsProps> = ({\n  sendState,\n  userFreeFeeLimits,\n  networkFees,\n  amount,\n}) => {\n  const {\n    settings: { useFreeTransactions },\n  } = useSettings();\n\n  return (\n    <Accordion\n      title={\n        <AccordionTitle\n          title=\"Transaction details\"\n          titleBottomName=\"Total\"\n          titleBottomValue={sendState.details.totalAmount || ''}\n        />\n      }\n      open={false}\n      noContentPadding\n    >\n      <ListWrapper>\n        <Row>\n          <Text className=\"gray\">Receive</Text>\n          <TokenAndUsd>\n            <Text>{sendState.details.receiveAmount}</Text>\n            <AmountUSDStyled\n              prefix=\"~\"\n              amount={sendState.parsedAmount?.toU64() || amount}\n              tokenName={sendState.fromTokenAccount?.balance?.token.symbol}\n            />\n          </TokenAndUsd>\n        </Row>\n        <Row>\n          <Text className=\"gray\">Transaction fee</Text>\n          {useFreeTransactions ? (\n            <Text>\n              Free{' '}\n              <Text className=\"green inline-flex\">\n                (Paid by P2P.org)\n                <FeeTransactionTooltip userFreeFeeLimits={userFreeFeeLimits} />\n              </Text>\n            </Text>\n          ) : (\n            <Text>1</Text>\n          )}\n        </Row>\n        {sendState.details.accountCreationAmount ? (\n          <Row>\n            <Text className=\"gray\">{sendState.destinationAccount?.symbol} account creation</Text>\n            <TokenAndUsd>\n              <Text>{sendState.details.accountCreationAmount}</Text>\n              <AmountUSDStyled\n                prefix=\"~\"\n                amount={networkFees?.accountRentExemption}\n                tokenName={sendState.fromTokenAccount?.balance?.token.symbol}\n              />\n            </TokenAndUsd>\n          </Row>\n        ) : undefined}\n      </ListWrapper>\n      <ListWrapper className=\"total\">\n        <Row>\n          <Text>Total</Text>\n          <TokenAndUsd>\n            <Text>{sendState.details.totalAmount}</Text>\n            <AmountUSDStyled\n              prefix=\"~\"\n              amount={sendState.parsedAmount?.toU64() || amount}\n              tokenName={sendState.fromTokenAccount?.balance?.token.symbol}\n            />\n          </TokenAndUsd>\n        </Row>\n      </ListWrapper>\n    </Accordion>\n  );\n};\n","import type { FC } from 'react';\n\nimport { styled } from '@linaria/react';\nimport type { TokenAccount } from '@p2p-wallet-web/core';\nimport type { TokenAmount } from '@p2p-wallet-web/token-utils';\nimport { theme } from '@p2p-wallet-web/ui';\nimport type { PublicKey } from '@solana/web3.js';\n\nimport { AddressText } from 'components/common/AddressText';\nimport { AmountUSD } from 'components/common/AmountUSD';\nimport { TokenAvatar } from 'components/common/TokenAvatar';\nimport type { TransactionDetailsProps } from 'components/common/TransactionDetails';\nimport { TransactionDetails } from 'components/common/TransactionDetails';\nimport { Icon } from 'components/ui';\n\nimport {\n  FieldInfo,\n  IconWrapper,\n  InfoTitle,\n  InfoValue,\n  InfoWrapper,\n  Section,\n  To,\n  Username,\n  WalletIcon,\n} from '../common/styled';\n\nconst ArrowWrapper = styled.div`\n  position: relative;\n\n  height: 16px;\n  margin-left: 26px;\n`;\n\nconst ArrowIconWrapper = styled.div`\n  position: relative;\n  top: -8px;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 32px;\n  height: 32px;\n\n  color: ${theme.colors.textIcon.active};\n\n  background: ${theme.colors.bg.primary};\n  border: 1px solid ${theme.colors.stroke.secondary};\n  border-radius: 12px;\n\n  &::before,\n  &::after {\n    position: absolute;\n\n    width: 1px;\n    height: 16px;\n\n    background: ${theme.colors.bg.primary};\n\n    content: '';\n  }\n\n  &::before {\n    left: -1px;\n  }\n\n  &::after {\n    right: -1px;\n  }\n`;\n\nconst ArrowIcon = styled(Icon)`\n  width: 16px;\n  height: 16px;\n`;\n\nexport type TransferParams = {\n  source: TokenAccount;\n  destination: PublicKey;\n  amount: TokenAmount;\n  username?: string;\n};\n\ninterface Props {\n  params: TransferParams;\n}\n\nexport const Send: FC<Props & TransactionDetailsProps> = ({\n  params,\n  sendState,\n  userFreeFeeLimits,\n  networkFees,\n  btcAddress,\n}) => {\n  const address = params.destination?.toBase58?.() || btcAddress;\n\n  return (\n    <Section className=\"send\">\n      <div>\n        <FieldInfo>\n          <TokenAvatar\n            symbol={params.source.balance?.token.symbol}\n            address={params.source.balance?.token.address}\n            size={44}\n          />\n          <InfoWrapper>\n            <InfoTitle>{params.amount.formatUnits()}</InfoTitle>\n            <InfoValue>\n              <AmountUSD value={params.amount} />\n            </InfoValue>\n          </InfoWrapper>\n        </FieldInfo>\n        <ArrowWrapper>\n          <ArrowIconWrapper>\n            <ArrowIcon name=\"arrow-down\" />\n          </ArrowIconWrapper>\n        </ArrowWrapper>\n        <FieldInfo>\n          <IconWrapper>\n            <WalletIcon name=\"wallet\" />\n          </IconWrapper>\n          <InfoWrapper>\n            {params.username ? (\n              <Username>\n                <To>To</To>\n                {params.username}\n              </Username>\n            ) : (\n              <InfoTitle className=\"secondary\">To address</InfoTitle>\n            )}\n            <InfoValue>{address && <AddressText address={address} medium />}</InfoValue>\n          </InfoWrapper>\n        </FieldInfo>\n      </div>\n\n      <TransactionDetails\n        sendState={sendState}\n        userFreeFeeLimits={userFreeFeeLimits}\n        networkFees={networkFees}\n        amount={params.amount.toU64()}\n      />\n    </Section>\n  );\n};\n","import type { FunctionComponent } from 'react';\nimport { useEffect, useState } from 'react';\n\nimport { useTransaction, useWallet } from '@p2p-wallet-web/core';\nimport { useConnectionContext } from '@saberhq/use-solana';\nimport classNames from 'classnames';\nimport dayjs from 'dayjs';\n\nimport type { ModalPropsType } from 'app/contexts';\nimport { ToastManager } from 'components/common/ToastManager';\nimport type { TransactionDetailsProps } from 'components/common/TransactionDetails';\nimport { trackEvent } from 'utils/analytics';\nimport { getExplorerUrl } from 'utils/connection';\nimport { transferNotification } from 'utils/transactionNotifications';\n\nimport { Send } from '../../TransactionConfirmModal/Send/Send';\nimport {\n  BlockWrapper,\n  CheckmarkIcon,\n  CloseIcon,\n  CloseWrapper,\n  DateHeader,\n  Footer,\n  GoToExplorerIcon,\n  GoToExplorerLink,\n  Header,\n  OtherIcon,\n  ProgressLine,\n  ProgressStub,\n  ProgressWrapper,\n  Section,\n  Time,\n  TransactionBadge,\n  TransactionLabel,\n  TransactionStatus,\n  Wrapper,\n} from '../common/styled';\nimport type { TransferParams } from './Send';\n\ntype SendActionType = () => Promise<string>;\n\nexport type TransactionStatusModalProps = TransactionDetailsProps & {\n  type: 'send' | 'swap';\n  action: SendActionType;\n  params: TransferParams;\n};\n\nexport const INITIAL_PROGRESS = 5;\nconst UPPER_PROGRESS_BOUND = 95;\nconst LOWER_PROGRESS_BOUND = 7;\nconst CHECK_PROGRESS_INTERVAL = 2500;\nconst FULL_PROGRESS = 100;\nconst ADDRESS_CHARS_SHOW = 4;\nconst DEFAULT_TRANSACTION_ERROR = 'Transaction error';\n\nexport const TransactionStatusModal: FunctionComponent<\n  ModalPropsType<string | null> & TransactionStatusModalProps\n> = ({ type, action, params, sendState, userFreeFeeLimits, networkFees, close }) => {\n  const { provider } = useWallet();\n\n  const { network } = useConnectionContext();\n  const [progress, setProgress] = useState(INITIAL_PROGRESS);\n  const [isExecuting, setIsExecuting] = useState(false);\n  const [signature, setSignature] = useState<string | null>(null);\n  const transaction = useTransaction(signature as string);\n  const [transactionError, setTransactionError] = useState(\n    transaction?.raw?.meta?.err ? DEFAULT_TRANSACTION_ERROR : '',\n  );\n\n  useEffect(() => {\n    let newProgress = INITIAL_PROGRESS;\n\n    if (!isExecuting) {\n      return;\n    }\n\n    const timerId = setInterval(() => {\n      if (progress <= UPPER_PROGRESS_BOUND) {\n        newProgress += LOWER_PROGRESS_BOUND;\n        setProgress(newProgress);\n      } else {\n        newProgress = UPPER_PROGRESS_BOUND;\n        setProgress(newProgress);\n      }\n    }, CHECK_PROGRESS_INTERVAL);\n\n    return () => {\n      clearTimeout(timerId);\n      setProgress(FULL_PROGRESS);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isExecuting]);\n\n  const executeAction = async () => {\n    try {\n      setIsExecuting(true);\n\n      switch (type) {\n        case 'send': {\n          const resultSignature = await action();\n          setSignature(resultSignature);\n\n          transferNotification({\n            header: 'Sent',\n            text: `- ${params.amount.formatUnits()}`,\n            symbol: params.amount.token.symbol,\n          });\n\n          break;\n        }\n        default:\n          throw new Error('Wrong type');\n      }\n    } catch (error) {\n      // setTransactionError((error as Error).message);\n      setIsExecuting(false);\n\n      if (type === 'send') {\n        ToastManager.error(type, (error as Error).message);\n      }\n    }\n  };\n\n  useEffect(() => {\n    void executeAction();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    const mount = async () => {\n      if (!signature) {\n        return;\n      }\n\n      try {\n        const trx = await provider.connection.getTransaction(signature, {\n          commitment: 'confirmed',\n        });\n        if (trx) {\n          if (trx.meta?.err) {\n            setTransactionError(DEFAULT_TRANSACTION_ERROR);\n          } else if (transactionError) {\n            setTransactionError('');\n          }\n        } else {\n          setTimeout(mount, CHECK_PROGRESS_INTERVAL);\n        }\n      } catch (error) {\n        // setTransactionError((error as Error).message);\n        ToastManager.error((error as Error).message);\n      } finally {\n        setIsExecuting(false);\n      }\n    };\n\n    void mount();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [signature]);\n\n  const isProcessing = (!signature || !transaction?.key) && !transactionError;\n  const isSuccess = Boolean(signature && transaction?.key && !transactionError);\n  const isError = Boolean(transactionError);\n\n  const today = new Date();\n  const utcDiff = today.getHours() - today.getUTCHours();\n\n  const shortAddress = sendState.destinationAddress.replace(\n    sendState.destinationAddress.substring(\n      ADDRESS_CHARS_SHOW,\n      sendState.destinationAddress.length - ADDRESS_CHARS_SHOW,\n    ),\n    '...',\n  );\n\n  const renderStatus = (executing: boolean, success: boolean, error: boolean) => {\n    switch (true) {\n      case executing:\n        return 'Pending';\n      case error:\n        return 'Error';\n      case success:\n        return 'Completed';\n      default:\n        return 'Pending';\n    }\n  };\n\n  const handleCloseClick = () => {\n    trackEvent('send_close_click', { transactionConfirmed: !isExecuting });\n\n    close(signature);\n  };\n\n  return (\n    <Wrapper>\n      <Section>\n        <>\n          <Header>\n            {params.amount.token.symbol} → {shortAddress}\n            <CloseWrapper onClick={handleCloseClick}>\n              <CloseIcon name=\"close\" />\n            </CloseWrapper>\n          </Header>\n          <DateHeader>\n            <span>{dayjs().format('MMMM D, YYYY')}</span>\n            <Time>{dayjs().format('hh:mm:ss')}</Time>\n            <span>\n              (UTC{utcDiff >= 0 ? '+' : '-'}\n              {utcDiff})\n            </span>\n          </DateHeader>\n        </>\n      </Section>\n      <ProgressWrapper>\n        <ProgressLine\n          style={{ width: `${progress}%` }}\n          className={classNames({\n            isSuccess,\n            isError,\n          })}\n        />\n        <ProgressStub />\n\n        <BlockWrapper\n          className={classNames({\n            isProcessing,\n            isSuccess,\n            isError,\n          })}\n        >\n          {isSuccess ? (\n            <CheckmarkIcon name=\"success-send\" />\n          ) : (\n            <OtherIcon name={transactionError ? 'error-send' : 'clock-send'} />\n          )}\n        </BlockWrapper>\n      </ProgressWrapper>\n      <Section>\n        <TransactionStatus>\n          Transaction status:\n          <TransactionBadge>\n            <TransactionLabel\n              className={classNames({\n                isProcessing,\n                isSuccess,\n                isError,\n              })}\n            />\n            {renderStatus(isExecuting, isSuccess, isError)}\n          </TransactionBadge>\n        </TransactionStatus>\n        <Send\n          sendState={sendState}\n          userFreeFeeLimits={userFreeFeeLimits}\n          params={params}\n          networkFees={networkFees}\n        />\n      </Section>\n      <Footer>\n        <GoToExplorerLink\n          href={signature ? getExplorerUrl('tx', signature, network) : ''}\n          target=\"_blank\"\n          rel=\"noopener noreferrer noindex\"\n          onClick={() => {\n            trackEvent('send_explorer_click', { transactionConfirmed: !isExecuting });\n          }}\n          className={classNames({\n            isDisabled: !signature,\n          })}\n        >\n          <GoToExplorerIcon name={'external'} />\n          View in Solana explorer\n        </GoToExplorerLink>\n      </Footer>\n    </Wrapper>\n  );\n};\n"],"sourceRoot":""}